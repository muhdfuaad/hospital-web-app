{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/HOSPITALAPP/hospitalapp/src/lib/axios.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  baseURL: \"https://localhost:7112\", // update to your .NET API URL\r\n});\r\n\r\n// // ✅ Automatically attach JWT token\r\n// API.interceptors.request.use((config) => {\r\n//   const token = localStorage.getItem(\"token\");\r\n\r\n//   if (token) {\r\n//     config.headers.Authorization = `Bearer ${token}`;\r\n//   }\r\n\r\n//   return config;\r\n// });\r\n\r\nexport default API;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;AACX;uCAae","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/HOSPITALAPP/hospitalapp/src/app/%28dashboard%29/nursesreview/page.tsx"],"sourcesContent":["'use client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSearchParams, useRouter } from 'next/navigation';\r\nimport API from '@/lib/axios';\r\nimport { User, Heart, Pencil, Trash2, Plus, Check, VenetianMask, Calendar, Users } from 'lucide-react';\r\n\r\ninterface PatientInfo {\r\n    name: string;\r\n    age: string;\r\n    gender: string;\r\n}\r\n\r\ninterface CellData {\r\n    [key: string]: boolean;\r\n}\r\n\r\ninterface FormData {\r\n    id?: number; // ✅ Add this\r\n    patientId: string;\r\n    reviewId: string;\r\n    date: string;\r\n    cells: CellData;\r\n    descriptions: { [key: string]: string };\r\n    customProcedures: string[];\r\n}\r\n\r\ninterface Procedure {\r\n    name: string;\r\n}\r\n\r\nconst NursesReviewForm: React.FC = () => {\r\n\r\n    const handleAddCustomProcedure = async () => {\r\n        if (newProcedureName.trim()) {\r\n            const trimmedName = newProcedureName.trim();\r\n\r\n            // ✅ Update local state\r\n            setFormData((prev) => ({\r\n                ...prev,\r\n                customProcedures: [...prev.customProcedures, trimmedName],\r\n                cells: { ...prev.cells, [trimmedName]: false },\r\n                descriptions: { ...prev.descriptions, [trimmedName]: '' },\r\n            }));\r\n\r\n            setAllProcedures((prev) => [...prev, trimmedName]);\r\n            setNewProcedureName('');\r\n            setShowAddInput(false);\r\n\r\n            // ✅ Send to backend using Axios\r\n            try {\r\n                await API.post('/api/NursesReviews/procedures', {\r\n                    name: trimmedName,\r\n                });\r\n            } catch (err: any) {\r\n                if (err?.response?.status !== 409) {\r\n                    console.error('❌ Failed to add procedure to backend:', err?.response?.data || err.message);\r\n                } else {\r\n                    console.warn('⚠️ Procedure already exists.');\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            handleAddCustomProcedure();\r\n        }\r\n    };\r\n\r\n    const [allProcedures, setAllProcedures] = useState<string[]>([]);\r\n\r\n\r\n    const handleEditProcedure = async (column: string) => {\r\n        const newName = prompt(\"Edit procedure name:\", column);\r\n        if (!newName || newName.trim() === '' || newName === column) return;\r\n\r\n        const trimmedName = newName.trim();\r\n\r\n        // ✅ Update local state\r\n        setFormData(prev => {\r\n            const updatedCells = { ...prev.cells };\r\n            const updatedDescriptions = { ...prev.descriptions };\r\n            const updatedProcedures = prev.customProcedures.map(p =>\r\n                p === column ? trimmedName : p\r\n            );\r\n\r\n            updatedCells[trimmedName] = updatedCells[column];\r\n            updatedDescriptions[trimmedName] = updatedDescriptions[column];\r\n            delete updatedCells[column];\r\n            delete updatedDescriptions[column];\r\n\r\n            return {\r\n                ...prev,\r\n                cells: updatedCells,\r\n                descriptions: updatedDescriptions,\r\n                customProcedures: updatedProcedures,\r\n            };\r\n        });\r\n\r\n        setAllProcedures(prev =>\r\n            prev.map(proc => (proc === column ? trimmedName : proc))\r\n        );\r\n\r\n        // ✅ Correct Axios PUT request with raw string payload\r\n        try {\r\n            await API.put(\r\n                `/api/NursesReviews/procedures/${encodeURIComponent(column)}`,\r\n                JSON.stringify(trimmedName), // send as raw string\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                }\r\n            );\r\n        } catch (err: any) {\r\n            console.error('❌ Failed to rename procedure:', err?.response?.data || err.message);\r\n        }\r\n    };\r\n\r\n\r\n    const handleDeleteProcedure = async (column: string) => {\r\n        if (!confirm(`Are you sure you want to delete \"${column}\"?`)) return;\r\n\r\n        // ✅ Update local state\r\n        setFormData(prev => {\r\n            const updatedCells = { ...prev.cells };\r\n            const updatedDescriptions = { ...prev.descriptions };\r\n\r\n            delete updatedCells[column];\r\n            delete updatedDescriptions[column];\r\n\r\n            return {\r\n                ...prev,\r\n                customProcedures: prev.customProcedures.filter(p => p !== column),\r\n                cells: updatedCells,\r\n                descriptions: updatedDescriptions,\r\n            };\r\n        });\r\n\r\n        setAllProcedures(prev => prev.filter(proc => proc !== column));\r\n\r\n        // ✅ Axios DELETE call\r\n        try {\r\n            await API.delete(`/api/NursesReviews/procedures/${encodeURIComponent(column)}`);\r\n        } catch (err: any) {\r\n            if (err?.response?.status !== 404) {\r\n                console.error('❌ Failed to delete procedure from backend:', err?.response?.data || err.message);\r\n            }\r\n        }\r\n    };\r\n\r\n    // 🔁 Fetch all available procedures from backend\r\n    useEffect(() => {\r\n        const fetchProcedures = async () => {\r\n            try {\r\n                const { data } = await API.get<Procedure[]>(\"/api/NursesReviews/procedures\");\r\n                const names = data.map(proc => proc.name);\r\n                setAllProcedures(names);\r\n            } catch (err) {\r\n                console.error(\"Failed to fetch procedures\", err);\r\n            }\r\n        };\r\n\r\n        fetchProcedures();\r\n    }, []);\r\n\r\n    const [formData, setFormData] = useState<FormData>({\r\n        patientId: '',\r\n        reviewId: '',\r\n        date: new Date().toISOString().split('T')[0],\r\n        cells: allProcedures.reduce((acc: CellData, col) => ({ ...acc, [col]: false }), {}),\r\n        descriptions: allProcedures.reduce((acc, col) => ({ ...acc, [col]: '' }), {}),\r\n        customProcedures: []\r\n    });\r\n\r\n    const [assignmentId, setAssignmentId] = useState('');\r\n    const [patientId, setPatientId] = useState('');\r\n    const [patientInfo, setPatientInfo] = useState<PatientInfo>({\r\n        name: '',\r\n        age: '',\r\n        gender: '',\r\n    });\r\n    const searchParams = useSearchParams();\r\n    const router = useRouter();\r\n    const isEditMode = !!formData.reviewId\r\n\r\n    // Get today's date in YYYY-MM-DD format\r\n    const getTodaysDate = () => {\r\n        const today = new Date();\r\n        return today.toISOString().split('T')[0];\r\n    };\r\n\r\n    const [date, setDate] = useState<string>(getTodaysDate());\r\n    const [team, setTeam] = useState<string>('');\r\n\r\n    const [newProcedureName, setNewProcedureName] = useState<string>('');\r\n    const [showAddInput, setShowAddInput] = useState<boolean>(false);\r\n    const [submitMessage, setSubmitMessage] = useState('');\r\n    const [submitStatus, setSubmitStatus] = useState<'success' | 'error' | ''>('');\r\n\r\n    const handleCellToggle = (column: string) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            cells: { ...prev.cells, [column]: !prev.cells[column] }\r\n        }));\r\n    };\r\n\r\n    const handleDescriptionChange = (column: string, value: string) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            descriptions: { ...prev.descriptions, [column]: value }\r\n        }));\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setFormData(prev => {\r\n            const updatedCells: CellData = { ...prev.cells };\r\n            const updatedDescriptions: { [key: string]: string } = { ...prev.descriptions };\r\n\r\n            allProcedures.forEach(proc => {\r\n                if (!(proc in updatedCells)) updatedCells[proc] = false;\r\n                if (!(proc in updatedDescriptions)) updatedDescriptions[proc] = '';\r\n            });\r\n\r\n            return {\r\n                ...prev,\r\n                cells: updatedCells,\r\n                descriptions: updatedDescriptions\r\n            };\r\n        });\r\n    }, [allProcedures]);\r\n\r\n    // ✅ Fetch assignmentId + patientId + basic info\r\n    useEffect(() => {\r\n        const assignment = searchParams.get('assignmentId');\r\n        if (!assignment) return;\r\n\r\n        if (assignmentId === assignment) return;\r\n\r\n        setAssignmentId(assignment);\r\n\r\n        const fetchAssignmentAndPatient = async () => {\r\n            try {\r\n                // ✅ Fetch assignment info\r\n                const assignmentRes = await API.get(`/api/PatientAssignments/byAssignmentId/${assignment}`);\r\n                const assignmentData = assignmentRes.data as any;\r\n\r\n                if (!assignmentData?.patientId) return;\r\n\r\n                setPatientId(assignmentData.patientId);\r\n                setFormData(prev => ({\r\n                    ...prev,\r\n                    reviewId: assignment,\r\n                    patientId: assignmentData.patientId\r\n                }));\r\n\r\n                // ✅ Fetch patient info using patientId\r\n                const patientRes = await API.get(`/api/Hpforms/patient/${assignmentData.patientId}`);\r\n                const patientData = patientRes.data as any;\r\n\r\n                if (!patientData) return;\r\n\r\n                setPatientInfo({\r\n                    name: patientData.name || '',\r\n                    age: patientData.age || '',\r\n                    gender: patientData.gender || ''\r\n                });\r\n            } catch (err) {\r\n                console.error('Failed to fetch assignment or patient data:', err);\r\n            }\r\n        };\r\n\r\n        fetchAssignmentAndPatient();\r\n    }, [searchParams, assignmentId]);\r\n\r\n\r\n    // to prefill data in form when Edit mode\r\n    useEffect(() => {\r\n        const assignmentId = searchParams.get('assignmentId');\r\n        if (!assignmentId) return;\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                const res = await API.get(`/api/NursesReviews/review/${assignmentId}`);\r\n                const data: Record<string, any> = res?.data || {};\r\n\r\n                const formattedDate = data?.date?.split?.('T')?.[0] || new Date().toISOString().split('T')[0];\r\n\r\n                setFormData(prev => ({\r\n                    ...prev,\r\n                    id: data?.id ?? null,\r\n                    patientId: data?.patientId ?? null,\r\n                    reviewId: data?.reviewId ?? null,\r\n                    date: formattedDate,\r\n                    cells: data?.cells || {},\r\n                    descriptions: data?.descriptions || {},\r\n                    customProcedures: data?.customProcedures || [],\r\n                }));\r\n            } catch (err: any) {\r\n                if (err?.response?.status === 404) {\r\n                    console.log('No review found. Prefill skipped.');\r\n                } else {\r\n                    console.error('Error fetching review:', err?.message || err);\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [searchParams]);\r\n\r\n\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        const payload = {\r\n            id: formData.id,\r\n            patientId: formData.patientId,\r\n            reviewId: formData.reviewId,\r\n            date: formData.date,\r\n            cellsJson: JSON.stringify(formData.cells),\r\n            descriptionsJson: JSON.stringify(formData.descriptions),\r\n            customProceduresJson: JSON.stringify(formData.customProcedures),\r\n        };\r\n\r\n        try {\r\n            if (formData.id) {\r\n                // PUT for edit mode\r\n                await API.put(`/api/NursesReviews/${formData.id}`, payload);\r\n            } else {\r\n                // POST for create mode\r\n                await API.post(\"/api/NursesReviews\", payload);\r\n            }\r\n\r\n            setSubmitStatus(\"success\");\r\n            setSubmitMessage(\"Nurse’s review submitted successfully.\");\r\n\r\n            setTimeout(() => {\r\n                router.push(`/nurse-consultations/details?patientId=${patientId}&assignmentId=${assignmentId}&refresh=1`)\r\n            }, 1000);\r\n        } catch (error: any) {\r\n            console.error(\"❌ Submission error:\", error?.response?.data || error.message);\r\n            setSubmitStatus(\"error\");\r\n            setSubmitMessage(\"Failed to submit the Nurse’s review. Please try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"min-h-screen w-full max-w-screen bg-gradient-to-br from-blue-50 to-blue-100 px-0 sm:px-0 py-0\">\r\n            {/* Header */}\r\n            <div className=\"bg-gradient-to-r from-blue-900 to-blue-700 text-white p-4 text-center sm:p-6 shadow-lg\">\r\n                <div className=\"flex justify-center items-center gap-3 mb-3\">\r\n                    <h1 className=\"text-2xl sm:text-3xl font-light\">\r\n                        Nurse's Review\r\n                    </h1>\r\n                    <Heart className=\"w-6 h-6 text-blue-200\" />\r\n                </div>\r\n\r\n                <p className=\"text-sm sm:text-lg text-blue-200\">\r\n                    Daily Homecare Procedure Report\r\n                </p>\r\n            </div>\r\n\r\n            <div className=\"p-5\">\r\n                {/* Patient and Review IDs and Date */}\r\n                <div className=\"text-sm sm:text-base font-medium text-blue-900 mb-4 px-2 sm:px-4\">\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                        {/* Patient ID */}\r\n                        <div className=\"flex justify-start\">\r\n                            <div className=\"flex items-center gap-2 bg-blue-50 text-blue-900 px-3 py-1.5 rounded-lg shadow-sm border border-blue-200 w-fit max-w-xs\">\r\n                                <span className=\"font-semibold\">Patient ID:</span>\r\n                                <span className=\"text-sm\">{formData.patientId || '-'}</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Review ID */}\r\n                        <div className=\"flex justify-start\">\r\n                            <div className=\"flex items-center gap-2 bg-blue-50 text-blue-900 px-3 py-1.5 rounded-lg shadow-sm border border-blue-200 w-fit max-w-xs\">\r\n                                <span className=\"font-semibold\">Review ID:</span>\r\n                                <span className=\"text-sm\">{formData.reviewId || '-'}</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Date Picker (right side) */}\r\n                        <div className=\"flex items-center gap-2 bg-blue-50 text-blue-900 px-3 py-1.5 rounded-lg shadow-sm border border-blue-200 w-fit max-w-xs\">\r\n                            <span className=\"font-semibold\">Date :</span>\r\n                            <input\r\n                                type=\"date\"\r\n                                value={formData.date}\r\n                                onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}\r\n                                className=\"...\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* 👤 Patient Information Display */}\r\n                <div className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200\">\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n\r\n                        {/* Name */}\r\n                        <div>\r\n                            <label className=\"block text-s font-semibold mb-1 uppercase tracking-wide\">\r\n                                <span className=\"text-blue-900\">Name :</span>{\" \"}\r\n                                <span className=\"text-blue-600\">\r\n                                    {patientInfo.name + \" / \" + patientInfo.age + \" / \" + patientInfo.gender}\r\n                                </span>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Table */}\r\n                <div className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\r\n                    <div className=\"overflow-x-auto\">\r\n                        <table className=\"w-full border border-gray-300 border-collapse table-auto\">\r\n                            <thead className=\"bg-gradient-to-r from-blue-900 to-blue-700 text-white\">\r\n                                <tr>\r\n                                    <th className=\"border border-gray-300 px-4 py-3 text-left text-xs font-semibold uppercase tracking-wider\" style={{ width: '30%' }}>\r\n                                        Care Procedure\r\n                                    </th>\r\n                                    <th className=\"border border-gray-300 px-4 py-3 text-center text-xs font-semibold uppercase tracking-wider\" style={{ width: '20%' }}>\r\n                                        Performed?\r\n                                    </th>\r\n                                    <th className=\"border border-gray-300 px-4 py-3 text-left text-xs font-semibold uppercase tracking-wider\" style={{ width: '50%' }}>\r\n                                        Description\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {allProcedures.map((column, colIndex) => (\r\n                                    <tr key={colIndex} className=\"hover:bg-blue-50 transition-colors duration-200 group\">\r\n                                        <td className=\"border border-gray-300 px-4 py-3 text-blue-900 font-medium flex items-center justify-between\">\r\n                                            {column}\r\n                                            {/* <div className=\"flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300 ml-2\">\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    onClick={() => handleEditProcedure(column)}\r\n                                                    title=\"Edit\"\r\n                                                    className=\"text-yellow-600 hover:text-yellow-800\"\r\n                                                >\r\n                                                    <Pencil className=\"w-4 h-4\" />\r\n                                                </button>\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    onClick={() => handleDeleteProcedure(column)}\r\n                                                    title=\"Delete\"\r\n                                                    className=\"text-red-600 hover:text-red-800\"\r\n                                                >\r\n                                                    <Trash2 className=\"w-4 h-4\" />\r\n                                                </button>\r\n                                            </div> */}\r\n                                        </td>\r\n                                        <td className=\"border border-gray-300 px-4 py-3 text-center\">\r\n                                            <div\r\n                                                className=\"w-8 h-8 mx-auto border-2 border-gray-300 rounded cursor-pointer hover:border-blue-500 hover:bg-blue-50 transition-all duration-200 flex items-center justify-center\"\r\n                                                onClick={() => handleCellToggle(column)}\r\n                                            >\r\n                                                {formData.cells[column] && (\r\n                                                    <svg\r\n                                                        className=\"w-5 h-5 text-green-600 font-bold\"\r\n                                                        fill=\"none\"\r\n                                                        stroke=\"currentColor\"\r\n                                                        viewBox=\"0 0 24 24\"\r\n                                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                    >\r\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\r\n                                                    </svg>\r\n                                                )}\r\n                                            </div>\r\n                                        </td>\r\n                                        <td className=\"border border-gray-300 px-4 py-3\">\r\n                                            {formData.cells[column] && (\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    value={formData.descriptions[column]}\r\n                                                    onChange={(e) => handleDescriptionChange(column, e.target.value)}\r\n                                                    className=\"w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                                                    placeholder=\"Add description...\"\r\n                                                />\r\n                                            )}\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n\r\n\r\n                                {/* Custom Procedure Add Row */}\r\n                                <tr className=\"bg-gray-50\">\r\n                                    <td className=\"border border-gray-300 px-4 py-3\">\r\n                                        {!showAddInput ? (\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                onClick={() => setShowAddInput(true)}\r\n                                                className=\"flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200\"\r\n                                            >\r\n                                                <Plus className=\"w-4 h-4\" />\r\n                                                Add Other Procedure\r\n                                            </button>\r\n                                        ) : (\r\n                                            <div className=\"flex gap-2\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    value={newProcedureName}\r\n                                                    onChange={(e) => setNewProcedureName(e.target.value)}\r\n                                                    onKeyPress={handleKeyPress}\r\n                                                    className=\"flex-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\r\n                                                    placeholder=\"Enter procedure name...\"\r\n                                                    autoFocus\r\n                                                />\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    onClick={handleAddCustomProcedure}\r\n                                                    className=\"px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors duration-200 text-sm\"\r\n                                                >\r\n                                                    Add\r\n                                                </button>\r\n                                                <button\r\n                                                    type=\"button\"\r\n                                                    onClick={() => {\r\n                                                        setShowAddInput(false);\r\n                                                        setNewProcedureName('');\r\n                                                    }}\r\n                                                    className=\"px-3 py-2 bg-gray-400 text-white rounded hover:bg-gray-500 transition-colors duration-200 text-sm\"\r\n                                                >\r\n                                                    Cancel\r\n                                                </button>\r\n                                            </div>\r\n                                        )}\r\n                                    </td>\r\n                                    <td className=\"border border-gray-300 px-4 py-3\"></td>\r\n                                    <td className=\"border border-gray-300 px-4 py-3\"></td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                {/* Action Buttons */}\r\n                {/* Submit Status Message */}\r\n                {submitMessage && (\r\n                    <div\r\n                        className={`mb-4 p-3 rounded-lg text-center text-sm font-semibold ${submitStatus === 'success'\r\n                            ? 'bg-green-100 text-green-800 border border-green-300'\r\n                            : 'bg-red-100 text-red-800 border border-red-300'\r\n                            }`}\r\n                    >\r\n                        {submitMessage}\r\n                    </div>\r\n                )}\r\n\r\n                {/* Submit Button Section */}\r\n                <div className=\"flex justify-center pt-6 print:hidden\">\r\n                    <button\r\n                        type=\"submit\"\r\n                        onClick={handleSubmit}\r\n                        className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white px-8 sm:px-12 py-3 sm:py-4 rounded-xl sm:rounded-2xl text-base sm:text-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-300 transform hover:scale-105 shadow-md sm:shadow-xl hover:shadow-lg sm:hover:shadow-2xl flex items-center gap-2 sm:gap-3\"\r\n                    >\r\n                        <Check className=\"w-5 h-5 sm:w-6 sm:h-6\" />\r\n                        {isEditMode ? \"Update Nurse's Review\" : \"Submit Nurse's Review\"}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NursesReviewForm;\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AAAA;AAAA;;;AAJA;;;;;AA8BA,MAAM,mBAA6B;;IAE/B,MAAM,2BAA2B;QAC7B,IAAI,iBAAiB,IAAI,IAAI;YACzB,MAAM,cAAc,iBAAiB,IAAI;YAEzC,uBAAuB;YACvB,YAAY,CAAC,OAAS,CAAC;oBACnB,GAAG,IAAI;oBACP,kBAAkB;2BAAI,KAAK,gBAAgB;wBAAE;qBAAY;oBACzD,OAAO;wBAAE,GAAG,KAAK,KAAK;wBAAE,CAAC,YAAY,EAAE;oBAAM;oBAC7C,cAAc;wBAAE,GAAG,KAAK,YAAY;wBAAE,CAAC,YAAY,EAAE;oBAAG;gBAC5D,CAAC;YAED,iBAAiB,CAAC,OAAS;uBAAI;oBAAM;iBAAY;YACjD,oBAAoB;YACpB,gBAAgB;YAEhB,gCAAgC;YAChC,IAAI;gBACA,MAAM,sHAAA,CAAA,UAAG,CAAC,IAAI,CAAC,iCAAiC;oBAC5C,MAAM;gBACV;YACJ,EAAE,OAAO,KAAU;gBACf,IAAI,KAAK,UAAU,WAAW,KAAK;oBAC/B,QAAQ,KAAK,CAAC,yCAAyC,KAAK,UAAU,QAAQ,IAAI,OAAO;gBAC7F,OAAO;oBACH,QAAQ,IAAI,CAAC;gBACjB;YACJ;QACJ;IACJ;IAEA,MAAM,iBAAiB,CAAC;QACpB,IAAI,EAAE,GAAG,KAAK,SAAS;YACnB;QACJ;IACJ;IAEA,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAG/D,MAAM,sBAAsB,OAAO;QAC/B,MAAM,UAAU,OAAO,wBAAwB;QAC/C,IAAI,CAAC,WAAW,QAAQ,IAAI,OAAO,MAAM,YAAY,QAAQ;QAE7D,MAAM,cAAc,QAAQ,IAAI;QAEhC,uBAAuB;QACvB,YAAY,CAAA;YACR,MAAM,eAAe;gBAAE,GAAG,KAAK,KAAK;YAAC;YACrC,MAAM,sBAAsB;gBAAE,GAAG,KAAK,YAAY;YAAC;YACnD,MAAM,oBAAoB,KAAK,gBAAgB,CAAC,GAAG,CAAC,CAAA,IAChD,MAAM,SAAS,cAAc;YAGjC,YAAY,CAAC,YAAY,GAAG,YAAY,CAAC,OAAO;YAChD,mBAAmB,CAAC,YAAY,GAAG,mBAAmB,CAAC,OAAO;YAC9D,OAAO,YAAY,CAAC,OAAO;YAC3B,OAAO,mBAAmB,CAAC,OAAO;YAElC,OAAO;gBACH,GAAG,IAAI;gBACP,OAAO;gBACP,cAAc;gBACd,kBAAkB;YACtB;QACJ;QAEA,iBAAiB,CAAA,OACb,KAAK,GAAG,CAAC,CAAA,OAAS,SAAS,SAAS,cAAc;QAGtD,sDAAsD;QACtD,IAAI;YACA,MAAM,sHAAA,CAAA,UAAG,CAAC,GAAG,CACT,CAAC,8BAA8B,EAAE,mBAAmB,SAAS,EAC7D,KAAK,SAAS,CAAC,cACf;gBACI,SAAS;oBACL,gBAAgB;gBACpB;YACJ;QAER,EAAE,OAAO,KAAU;YACf,QAAQ,KAAK,CAAC,iCAAiC,KAAK,UAAU,QAAQ,IAAI,OAAO;QACrF;IACJ;IAGA,MAAM,wBAAwB,OAAO;QACjC,IAAI,CAAC,QAAQ,CAAC,iCAAiC,EAAE,OAAO,EAAE,CAAC,GAAG;QAE9D,uBAAuB;QACvB,YAAY,CAAA;YACR,MAAM,eAAe;gBAAE,GAAG,KAAK,KAAK;YAAC;YACrC,MAAM,sBAAsB;gBAAE,GAAG,KAAK,YAAY;YAAC;YAEnD,OAAO,YAAY,CAAC,OAAO;YAC3B,OAAO,mBAAmB,CAAC,OAAO;YAElC,OAAO;gBACH,GAAG,IAAI;gBACP,kBAAkB,KAAK,gBAAgB,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM;gBAC1D,OAAO;gBACP,cAAc;YAClB;QACJ;QAEA,iBAAiB,CAAA,OAAQ,KAAK,MAAM,CAAC,CAAA,OAAQ,SAAS;QAEtD,sBAAsB;QACtB,IAAI;YACA,MAAM,sHAAA,CAAA,UAAG,CAAC,MAAM,CAAC,CAAC,8BAA8B,EAAE,mBAAmB,SAAS;QAClF,EAAE,OAAO,KAAU;YACf,IAAI,KAAK,UAAU,WAAW,KAAK;gBAC/B,QAAQ,KAAK,CAAC,8CAA8C,KAAK,UAAU,QAAQ,IAAI,OAAO;YAClG;QACJ;IACJ;IAEA,iDAAiD;IACjD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACN,MAAM;8DAAkB;oBACpB,IAAI;wBACA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAA,CAAA,UAAG,CAAC,GAAG,CAAc;wBAC5C,MAAM,QAAQ,KAAK,GAAG;gFAAC,CAAA,OAAQ,KAAK,IAAI;;wBACxC,iBAAiB;oBACrB,EAAE,OAAO,KAAK;wBACV,QAAQ,KAAK,CAAC,8BAA8B;oBAChD;gBACJ;;YAEA;QACJ;qCAAG,EAAE;IAEL,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY;QAC/C,WAAW;QACX,UAAU;QACV,MAAM,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;QAC5C,OAAO,cAAc,MAAM;yCAAC,CAAC,KAAe,MAAQ,CAAC;oBAAE,GAAG,GAAG;oBAAE,CAAC,IAAI,EAAE;gBAAM,CAAC;wCAAG,CAAC;QACjF,cAAc,cAAc,MAAM;yCAAC,CAAC,KAAK,MAAQ,CAAC;oBAAE,GAAG,GAAG;oBAAE,CAAC,IAAI,EAAE;gBAAG,CAAC;wCAAG,CAAC;QAC3E,kBAAkB,EAAE;IACxB;IAEA,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;QACxD,MAAM;QACN,KAAK;QACL,QAAQ;IACZ;IACA,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,aAAa,CAAC,CAAC,SAAS,QAAQ;IAEtC,wCAAwC;IACxC,MAAM,gBAAgB;QAClB,MAAM,QAAQ,IAAI;QAClB,OAAO,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAC5C;IAEA,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IACzC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAEzC,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IACjE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW;IAC1D,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA4B;IAE3E,MAAM,mBAAmB,CAAC;QACtB,YAAY,CAAA,OAAQ,CAAC;gBACjB,GAAG,IAAI;gBACP,OAAO;oBAAE,GAAG,KAAK,KAAK;oBAAE,CAAC,OAAO,EAAE,CAAC,KAAK,KAAK,CAAC,OAAO;gBAAC;YAC1D,CAAC;IACL;IAEA,MAAM,0BAA0B,CAAC,QAAgB;QAC7C,YAAY,CAAA,OAAQ,CAAC;gBACjB,GAAG,IAAI;gBACP,cAAc;oBAAE,GAAG,KAAK,YAAY;oBAAE,CAAC,OAAO,EAAE;gBAAM;YAC1D,CAAC;IACL;IAIA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACN;8CAAY,CAAA;oBACR,MAAM,eAAyB;wBAAE,GAAG,KAAK,KAAK;oBAAC;oBAC/C,MAAM,sBAAiD;wBAAE,GAAG,KAAK,YAAY;oBAAC;oBAE9E,cAAc,OAAO;sDAAC,CAAA;4BAClB,IAAI,CAAC,CAAC,QAAQ,YAAY,GAAG,YAAY,CAAC,KAAK,GAAG;4BAClD,IAAI,CAAC,CAAC,QAAQ,mBAAmB,GAAG,mBAAmB,CAAC,KAAK,GAAG;wBACpE;;oBAEA,OAAO;wBACH,GAAG,IAAI;wBACP,OAAO;wBACP,cAAc;oBAClB;gBACJ;;QACJ;qCAAG;QAAC;KAAc;IAElB,gDAAgD;IAChD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACN,MAAM,aAAa,aAAa,GAAG,CAAC;YACpC,IAAI,CAAC,YAAY;YAEjB,IAAI,iBAAiB,YAAY;YAEjC,gBAAgB;YAEhB,MAAM;wEAA4B;oBAC9B,IAAI;wBACA,0BAA0B;wBAC1B,MAAM,gBAAgB,MAAM,sHAAA,CAAA,UAAG,CAAC,GAAG,CAAC,CAAC,uCAAuC,EAAE,YAAY;wBAC1F,MAAM,iBAAiB,cAAc,IAAI;wBAEzC,IAAI,CAAC,gBAAgB,WAAW;wBAEhC,aAAa,eAAe,SAAS;wBACrC;oFAAY,CAAA,OAAQ,CAAC;oCACjB,GAAG,IAAI;oCACP,UAAU;oCACV,WAAW,eAAe,SAAS;gCACvC,CAAC;;wBAED,uCAAuC;wBACvC,MAAM,aAAa,MAAM,sHAAA,CAAA,UAAG,CAAC,GAAG,CAAC,CAAC,qBAAqB,EAAE,eAAe,SAAS,EAAE;wBACnF,MAAM,cAAc,WAAW,IAAI;wBAEnC,IAAI,CAAC,aAAa;wBAElB,eAAe;4BACX,MAAM,YAAY,IAAI,IAAI;4BAC1B,KAAK,YAAY,GAAG,IAAI;4BACxB,QAAQ,YAAY,MAAM,IAAI;wBAClC;oBACJ,EAAE,OAAO,KAAK;wBACV,QAAQ,KAAK,CAAC,+CAA+C;oBACjE;gBACJ;;YAEA;QACJ;qCAAG;QAAC;QAAc;KAAa;IAG/B,yCAAyC;IACzC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACN,MAAM,eAAe,aAAa,GAAG,CAAC;YACtC,IAAI,CAAC,cAAc;YAEnB,MAAM;wDAAY;oBACd,IAAI;wBACA,MAAM,MAAM,MAAM,sHAAA,CAAA,UAAG,CAAC,GAAG,CAAC,CAAC,0BAA0B,EAAE,cAAc;wBACrE,MAAM,OAA4B,KAAK,QAAQ,CAAC;wBAEhD,MAAM,gBAAgB,MAAM,MAAM,QAAQ,MAAM,CAAC,EAAE,IAAI,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;wBAE7F;oEAAY,CAAA,OAAQ,CAAC;oCACjB,GAAG,IAAI;oCACP,IAAI,MAAM,MAAM;oCAChB,WAAW,MAAM,aAAa;oCAC9B,UAAU,MAAM,YAAY;oCAC5B,MAAM;oCACN,OAAO,MAAM,SAAS,CAAC;oCACvB,cAAc,MAAM,gBAAgB,CAAC;oCACrC,kBAAkB,MAAM,oBAAoB,EAAE;gCAClD,CAAC;;oBACL,EAAE,OAAO,KAAU;wBACf,IAAI,KAAK,UAAU,WAAW,KAAK;4BAC/B,QAAQ,GAAG,CAAC;wBAChB,OAAO;4BACH,QAAQ,KAAK,CAAC,0BAA0B,KAAK,WAAW;wBAC5D;oBACJ;gBACJ;;YAEA;QACJ;qCAAG;QAAC;KAAa;IAGjB,MAAM,eAAe,OAAO;QACxB,EAAE,cAAc;QAEhB,MAAM,UAAU;YACZ,IAAI,SAAS,EAAE;YACf,WAAW,SAAS,SAAS;YAC7B,UAAU,SAAS,QAAQ;YAC3B,MAAM,SAAS,IAAI;YACnB,WAAW,KAAK,SAAS,CAAC,SAAS,KAAK;YACxC,kBAAkB,KAAK,SAAS,CAAC,SAAS,YAAY;YACtD,sBAAsB,KAAK,SAAS,CAAC,SAAS,gBAAgB;QAClE;QAEA,IAAI;YACA,IAAI,SAAS,EAAE,EAAE;gBACb,oBAAoB;gBACpB,MAAM,sHAAA,CAAA,UAAG,CAAC,GAAG,CAAC,CAAC,mBAAmB,EAAE,SAAS,EAAE,EAAE,EAAE;YACvD,OAAO;gBACH,uBAAuB;gBACvB,MAAM,sHAAA,CAAA,UAAG,CAAC,IAAI,CAAC,sBAAsB;YACzC;YAEA,gBAAgB;YAChB,iBAAiB;YAEjB,WAAW;gBACP,OAAO,IAAI,CAAC,CAAC,uCAAuC,EAAE,UAAU,cAAc,EAAE,aAAa,UAAU,CAAC;YAC5G,GAAG;QACP,EAAE,OAAO,OAAY;YACjB,QAAQ,KAAK,CAAC,uBAAuB,OAAO,UAAU,QAAQ,MAAM,OAAO;YAC3E,gBAAgB;YAChB,iBAAiB;QACrB;IACJ;IAEA,qBACI,6LAAC;QAAI,WAAU;;0BAEX,6LAAC;gBAAI,WAAU;;kCACX,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAG,WAAU;0CAAkC;;;;;;0CAGhD,6LAAC,uMAAA,CAAA,QAAK;gCAAC,WAAU;;;;;;;;;;;;kCAGrB,6LAAC;wBAAE,WAAU;kCAAmC;;;;;;;;;;;;0BAKpD,6LAAC;gBAAI,WAAU;;kCAEX,6LAAC;wBAAI,WAAU;kCACX,cAAA,6LAAC;4BAAI,WAAU;;8CAEX,6LAAC;oCAAI,WAAU;8CACX,cAAA,6LAAC;wCAAI,WAAU;;0DACX,6LAAC;gDAAK,WAAU;0DAAgB;;;;;;0DAChC,6LAAC;gDAAK,WAAU;0DAAW,SAAS,SAAS,IAAI;;;;;;;;;;;;;;;;;8CAKzD,6LAAC;oCAAI,WAAU;8CACX,cAAA,6LAAC;wCAAI,WAAU;;0DACX,6LAAC;gDAAK,WAAU;0DAAgB;;;;;;0DAChC,6LAAC;gDAAK,WAAU;0DAAW,SAAS,QAAQ,IAAI;;;;;;;;;;;;;;;;;8CAKxD,6LAAC;oCAAI,WAAU;;sDACX,6LAAC;4CAAK,WAAU;sDAAgB;;;;;;sDAChC,6LAAC;4CACG,MAAK;4CACL,OAAO,SAAS,IAAI;4CACpB,UAAU,CAAC,IAAM,YAAY,CAAA,OAAQ,CAAC;wDAAE,GAAG,IAAI;wDAAE,MAAM,EAAE,MAAM,CAAC,KAAK;oDAAC,CAAC;4CACvE,WAAU;;;;;;;;;;;;;;;;;;;;;;;kCAO1B,6LAAC;wBAAI,WAAU;kCACX,cAAA,6LAAC;4BAAI,WAAU;sCAGX,cAAA,6LAAC;0CACG,cAAA,6LAAC;oCAAM,WAAU;;sDACb,6LAAC;4CAAK,WAAU;sDAAgB;;;;;;wCAAc;sDAC9C,6LAAC;4CAAK,WAAU;sDACX,YAAY,IAAI,GAAG,QAAQ,YAAY,GAAG,GAAG,QAAQ,YAAY,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAQ5F,6LAAC;wBAAI,WAAU;kCACX,cAAA,6LAAC;4BAAI,WAAU;sCACX,cAAA,6LAAC;gCAAM,WAAU;;kDACb,6LAAC;wCAAM,WAAU;kDACb,cAAA,6LAAC;;8DACG,6LAAC;oDAAG,WAAU;oDAA4F,OAAO;wDAAE,OAAO;oDAAM;8DAAG;;;;;;8DAGnI,6LAAC;oDAAG,WAAU;oDAA8F,OAAO;wDAAE,OAAO;oDAAM;8DAAG;;;;;;8DAGrI,6LAAC;oDAAG,WAAU;oDAA4F,OAAO;wDAAE,OAAO;oDAAM;8DAAG;;;;;;;;;;;;;;;;;kDAK3I,6LAAC;;4CACI,cAAc,GAAG,CAAC,CAAC,QAAQ,yBACxB,6LAAC;oDAAkB,WAAU;;sEACzB,6LAAC;4DAAG,WAAU;sEACT;;;;;;sEAoBL,6LAAC;4DAAG,WAAU;sEACV,cAAA,6LAAC;gEACG,WAAU;gEACV,SAAS,IAAM,iBAAiB;0EAE/B,SAAS,KAAK,CAAC,OAAO,kBACnB,6LAAC;oEACG,WAAU;oEACV,MAAK;oEACL,QAAO;oEACP,SAAQ;oEACR,OAAM;8EAEN,cAAA,6LAAC;wEAAK,eAAc;wEAAQ,gBAAe;wEAAQ,aAAa;wEAAG,GAAE;;;;;;;;;;;;;;;;;;;;;sEAKrF,6LAAC;4DAAG,WAAU;sEACT,SAAS,KAAK,CAAC,OAAO,kBACnB,6LAAC;gEACG,MAAK;gEACL,OAAO,SAAS,YAAY,CAAC,OAAO;gEACpC,UAAU,CAAC,IAAM,wBAAwB,QAAQ,EAAE,MAAM,CAAC,KAAK;gEAC/D,WAAU;gEACV,aAAY;;;;;;;;;;;;mDA/CnB;;;;;0DAwDb,6LAAC;gDAAG,WAAU;;kEACV,6LAAC;wDAAG,WAAU;kEACT,CAAC,6BACE,6LAAC;4DACG,MAAK;4DACL,SAAS,IAAM,gBAAgB;4DAC/B,WAAU;;8EAEV,6LAAC,qMAAA,CAAA,OAAI;oEAAC,WAAU;;;;;;gEAAY;;;;;;iFAIhC,6LAAC;4DAAI,WAAU;;8EACX,6LAAC;oEACG,MAAK;oEACL,OAAO;oEACP,UAAU,CAAC,IAAM,oBAAoB,EAAE,MAAM,CAAC,KAAK;oEACnD,YAAY;oEACZ,WAAU;oEACV,aAAY;oEACZ,SAAS;;;;;;8EAEb,6LAAC;oEACG,MAAK;oEACL,SAAS;oEACT,WAAU;8EACb;;;;;;8EAGD,6LAAC;oEACG,MAAK;oEACL,SAAS;wEACL,gBAAgB;wEAChB,oBAAoB;oEACxB;oEACA,WAAU;8EACb;;;;;;;;;;;;;;;;;kEAMb,6LAAC;wDAAG,WAAU;;;;;;kEACd,6LAAC;wDAAG,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQjC,+BACG,6LAAC;wBACG,WAAW,CAAC,sDAAsD,EAAE,iBAAiB,YAC/E,wDACA,iDACA;kCAEL;;;;;;kCAKT,6LAAC;wBAAI,WAAU;kCACX,cAAA,6LAAC;4BACG,MAAK;4BACL,SAAS;4BACT,WAAU;;8CAEV,6LAAC,uMAAA,CAAA,QAAK;oCAAC,WAAU;;;;;;gCAChB,aAAa,0BAA0B;;;;;;;;;;;;;;;;;;;;;;;;AAMhE;GAthBM;;QAwJmB,qIAAA,CAAA,kBAAe;QACrB,qIAAA,CAAA,YAAS;;;KAzJtB;uCAwhBS","debugId":null}}]
}