{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/HOSPITALAPP/hospitalapp/src/lib/axios.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  baseURL: \"https://localhost:7112\", // update to your .NET API URL\r\n});\r\n\r\n// // âœ… Automatically attach JWT token\r\n// API.interceptors.request.use((config) => {\r\n//   const token = localStorage.getItem(\"token\");\r\n\r\n//   if (token) {\r\n//     config.headers.Authorization = `Bearer ${token}`;\r\n//   }\r\n\r\n//   return config;\r\n// });\r\n\r\nexport default API;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;AACX;uCAae","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/HOSPITALAPP/hospitalapp/src/app/%28dashboard%29/SalesBill/addSalesbill/page.tsx"],"sourcesContent":["'use client';\r\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { Trash2, Plus, Save, ChevronDown } from 'lucide-react';\r\nimport API from '@/lib/axios';\r\n\r\nconst API_BASE = API.defaults.baseURL; // IMPORTANT: Replace with your actual API base URL\r\n\r\n// --- Embedded SearchableSelect Component ---\r\ninterface SearchableSelectItem {\r\n    id: string; // Changed to string to match value prop and common HTML input patterns\r\n    name: string;\r\n    isLowStock?: boolean; // Added for medicine batch low stock indication\r\n}\r\n\r\ninterface SearchableSelectProps {\r\n    label: string;\r\n    value: string; // Represents the selected item's ID\r\n    searchValue: string; // Represents the current text input for searching\r\n    setSearchValue: (value: string) => void;\r\n    showDropdown: boolean;\r\n    setShowDropdown: (open: boolean) => void;\r\n    items: SearchableSelectItem[];\r\n    onSelect: (id: string, name: string) => void; // onSelect now expects string id\r\n    renderItem: (item: SearchableSelectItem) => React.ReactNode;\r\n    placeholder?: string;\r\n    isDisabled?: boolean;\r\n    inputRef?: React.Ref<HTMLInputElement>;\r\n    editUrl?: string;\r\n    error?: string;\r\n}\r\n\r\nconst SearchableSelect: React.FC<SearchableSelectProps> = ({\r\n    label,\r\n    value,\r\n    searchValue,\r\n    setSearchValue,\r\n    showDropdown,\r\n    setShowDropdown,\r\n    items,\r\n    onSelect,\r\n    renderItem,\r\n    placeholder,\r\n    isDisabled,\r\n    inputRef\r\n}) => {\r\n    const dropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n    // Close dropdown when clicking outside\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n                setShowDropdown(false);\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, [setShowDropdown]);\r\n\r\n    const displayValue = useMemo(() => {\r\n        const selectedItem = items.find(item => item.id === value);\r\n        return selectedItem ? selectedItem.name : searchValue;\r\n    }, [items, value, searchValue]);\r\n\r\n    return (\r\n        <div className=\"relative\" ref={dropdownRef}>\r\n            {label && <label className=\"block text-xs font-semibold text-blue-900 mb-1\">{label}</label>}\r\n            <div className=\"flex border border-blue-300 rounded-md focus-within:ring-2 focus-within:ring-blue-500 bg-white\">\r\n                <input\r\n                    ref={inputRef}\r\n                    type=\"text\"\r\n                    value={displayValue}\r\n                    onChange={(e) => {\r\n                        setSearchValue(e.target.value);\r\n                        if (!showDropdown) setShowDropdown(true);\r\n                    }}\r\n                    onFocus={() => setShowDropdown(true)}\r\n                    placeholder={placeholder}\r\n                    className=\"flex-grow px-2 py-1.5 text-sm rounded-l-md focus:outline-none bg-transparent\"\r\n                    disabled={isDisabled}\r\n                />\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={() => setShowDropdown(!showDropdown)}\r\n                    className=\"px-2 py-1.5 bg-blue-100 rounded-r-md text-blue-700 hover:bg-blue-200 focus:outline-none\"\r\n                    disabled={isDisabled}\r\n                >\r\n                    <ChevronDown size={16} />\r\n                </button>\r\n            </div>\r\n            {showDropdown && (\r\n                <div className=\"absolute z-50 w-full bg-white border border-blue-300 rounded-md shadow-lg max-h-60 overflow-y-auto mt-1\"> {/* Increased z-index */}\r\n                    {items.length === 0 && <div className=\"p-2 text-sm text-gray-500\">No results found.</div>}\r\n                    {items.map((item) => (\r\n                        <div\r\n                            key={item.id}\r\n                            className=\"p-2 cursor-pointer hover:bg-blue-100\"\r\n                            onClick={() => {\r\n                                onSelect(item.id, item.name); // Pass both id and name for flexibility\r\n                                setShowDropdown(false);\r\n                                setSearchValue(''); // Clear search after selection\r\n                            }}\r\n                        >\r\n                            {renderItem(item)}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n// --- End Embedded SearchableSelect Component ---\r\n\r\n\r\n// Custom Modal for alerts/confirms instead of window.alert/confirm\r\ninterface ModalProps {\r\n    message: string;\r\n    onClose: () => void;\r\n    onConfirm?: () => void;\r\n    type: 'alert' | 'confirm';\r\n}\r\n\r\nconst CustomModal: React.FC<ModalProps> = ({ message, onClose, onConfirm, type }) => {\r\n    return (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\">\r\n            <div className=\"bg-white p-6 rounded-lg shadow-xl max-w-sm w-full\">\r\n                <p className=\"text-gray-800 text-lg mb-4 text-center\">{message}</p>\r\n                <div className=\"flex justify-center space-x-4\">\r\n                    {type === 'confirm' && (\r\n                        <button\r\n                            onClick={onConfirm}\r\n                            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\"\r\n                        >\r\n                            Confirm\r\n                        </button>\r\n                    )}\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=\"px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-opacity-50\"\r\n                    >\r\n                        {type === 'alert' ? 'OK' : 'Cancel'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Types for Sales Bill\r\ninterface Customer {\r\n    id: number;\r\n    name: string;\r\n    mobileNo: string;\r\n}\r\n\r\ninterface Doctor {\r\n    id: number;\r\n    name: string;\r\n    phone: string; // Added phone based on your renderItem in the original prompt\r\n}\r\n\r\ninterface SalesMan {\r\n    id: number;\r\n    code: string;\r\n    name: string;\r\n}\r\n\r\ninterface Medicine {\r\n    id: number;\r\n    itemCode: string;\r\n    medicineName: string;\r\n    type: string;\r\n    packItem: number; // Changed to number as Qty calculations will use it\r\n    purchaseRate: number; // Added for display in table as per user request\r\n    salesRate: number; // Sales rate from Medicine\r\n    gst: number;\r\n    hsnCode: string;\r\n}\r\n\r\ninterface MedicineBatch {\r\n    id: number;\r\n    batchNo: string;\r\n    expiryDate: string; // YYYY-MM-DD format\r\n    mrp: number;\r\n    currentStock: number; // Smallest unit quantity\r\n    medicineId: number;\r\n    salesRate: number;\r\n}\r\n\r\ninterface SaleItem {\r\n    id: number; // Client-side unique ID\r\n    itemCode: string;\r\n    productInfo: string; // medicineName\r\n    medicineId: number;\r\n    packItem: number; // From Medicine\r\n    batchNo: string;\r\n    expiryDate: string;\r\n    qty: number; // Smallest level of Qty\r\n    free: number; // Smallest level of Qty\r\n    price: number; // S.rate from Medicine\r\n    discPercent: number;\r\n    discAmt: number;\r\n    mrp: number; // From MedicineBatch\r\n    amount: number; // Calculated total for this item line\r\n    gst: number; // From Medicine\r\n    gstAmount: number; // Calculated GST for this item\r\n    cgstAmount?: number;\r\n    sgstAmount?: number;\r\n    igstAmount?: number;\r\n    hsnCode: string; // From Medicine\r\n    // Additional for internal calculations/tracking\r\n    baseAmount?: number; // Price * Qty before discount\r\n    currentStockAtSelection?: number; // Stock from batch when selected, for display\r\n    purchaseRate?: number; // For display, fetched from Medicine\r\n    type?: string; // For display, fetched from Medicine\r\n}\r\n\r\ninterface SalesBill {\r\n    billNo: number;\r\n    date: string;\r\n    customerName: string;\r\n    mobileNo: string;\r\n    doctorId: number;\r\n    doctorName: string;\r\n    salesManId: number;\r\n    salesManName: string;\r\n    paymentType: 'Cash' | 'Card' | 'Online' | 'Credit'; // Default Cash\r\n    items: SaleItem[];\r\n    grossTotal: number;\r\n    gstTotal: number;\r\n    roundOff: number;\r\n    discount: number; // Total discount across all items\r\n    cgst: number;\r\n    sgst: number;\r\n    igst: number;\r\n    cessAmount: number; // Assuming similar to purchase for now\r\n    finalTotal: number;\r\n    taxType?: 'intra' | 'inter'; // Based on GST logic (e.g., Kerala)\r\n    isCancelled?: boolean;\r\n}\r\n\r\nconst SalesBillPage: React.FC = () => {\r\n    // State for the Sales Bill\r\n    const [salesBill, setSalesBill] = useState<SalesBill>({\r\n        billNo: 0,\r\n        date: new Date().toISOString().split('T')[0],\r\n        customerName: '',\r\n        mobileNo: '',\r\n        doctorId: 0,\r\n        doctorName: '',\r\n        salesManId: 0,\r\n        salesManName: '',\r\n        paymentType: 'Cash',\r\n        items: [\r\n            {\r\n                id: Date.now(), // Unique ID for client-side rendering\r\n                itemCode: '',\r\n                productInfo: '',\r\n                medicineId: 0,\r\n                packItem: 0,\r\n                batchNo: '',\r\n                expiryDate: '',\r\n                qty: 0, // Default to 0 for new input row\r\n                free: 0,\r\n                price: 0,\r\n                discPercent: 0,\r\n                discAmt: 0,\r\n                mrp: 0,\r\n                amount: 0,\r\n                gst: 0,\r\n                gstAmount: 0,\r\n                hsnCode: '',\r\n                currentStockAtSelection: 0,\r\n                purchaseRate: 0, // Initial value\r\n                type: '', // Initial value\r\n            }\r\n        ],\r\n        grossTotal: 0,\r\n        gstTotal: 0,\r\n        roundOff: 0,\r\n        discount: 0,\r\n        cgst: 0,\r\n        sgst: 0,\r\n        igst: 0,\r\n        cessAmount: 0,\r\n        finalTotal: 0,\r\n        taxType: 'intra', // Default to intra-state\r\n    });\r\n\r\n    // Master data states\r\n    const [medicines, setMedicines] = useState<Medicine[]>([]);\r\n    const [doctors, setDoctors] = useState<Doctor[]>([]);\r\n    const [salesMen, setSalesMen] = useState<SalesMan[]>([]);\r\n    const [medicineBatches, setMedicineBatches] = useState<MedicineBatch[]>([]);\r\n\r\n    // UI states for SearchableSelect and general messages\r\n    const [searchTerms, setSearchTerms] = useState<Record<string | number, string>>({});\r\n    const [activeDropdown, setActiveDropdown] = useState<string | number | null>(null); // To control which SearchableSelect dropdown is open\r\n\r\n    // State for the custom medicine dropdown in the table\r\n    const [showMedicineDropdown, setShowMedicineDropdown] = useState<number | null>(null); // itemId for which medicine dropdown is active\r\n    const [medicineSearchInput, setMedicineSearchInput] = useState<string>('');\r\n    const medicineDropdownRef = useRef<HTMLTableCellElement | null>(null);\r\n\r\n\r\n    const [modalMessage, setModalMessage] = useState('');\r\n    const [modalType, setModalType] = useState<'alert' | 'confirm'>('alert');\r\n    const [modalCallback, setModalCallback] = useState<(() => void) | null>(null);\r\n\r\n    const closeModal = () => {\r\n        setModalMessage('');\r\n        setModalCallback(null);\r\n    };\r\n\r\n    const showAlert = (message: string) => {\r\n        setModalMessage(message);\r\n        setModalType('alert');\r\n    };\r\n\r\n    const showConfirm = (message: string, callback: () => void) => {\r\n        setModalMessage(message);\r\n        setModalType('confirm');\r\n        setModalCallback(() => callback);\r\n    };\r\n\r\n    const editId = new URLSearchParams(window.location.search).get('edit');\r\n\r\n    const isCancelled = salesBill.isCancelled === true;\r\n    const isFinalized = salesBill.finalTotal > 0 && !salesBill.isCancelled;\r\n\r\n    // Refs for input focus management\r\n    const inputRefs = useRef<{ [key: string]: HTMLInputElement | HTMLSelectElement | null }>({});\r\n\r\n    // Fetch Bill No. on initial load if not in edit mode\r\n    useEffect(() => {\r\n        const fetchBillNo = async () => {\r\n            try {\r\n                const res = await fetch(`${API_BASE}/api/SalesBills/next-bill-no`);\r\n                if (!res.ok) throw new Error('Failed to fetch Bill No');\r\n                const newId = await res.json();\r\n                setSalesBill(prev => ({ ...prev, billNo: newId }));\r\n            } catch (error) {\r\n                console.error('Error fetching Bill No:', error);\r\n                showAlert('Error fetching Bill No.');\r\n            }\r\n        };\r\n        if (!editId) {\r\n            fetchBillNo();\r\n        }\r\n    }, [editId]);\r\n\r\n    // Fetch master data (Medicines, Doctors, SalesMen)\r\n    useEffect(() => {\r\n        const fetchMasterData = async () => {\r\n            try {\r\n                // Medicines\r\n                const medicinesRes = await fetch(`${API_BASE}/api/Medicines/dropdown`);\r\n                if (!medicinesRes.ok) throw new Error('Failed to fetch medicines');\r\n                setMedicines(await medicinesRes.json());\r\n\r\n                // Doctors - Corrected API endpoint using fetch\r\n                const doctorsRes = await fetch(`${API_BASE}/api/Doctors/all-doctors`);\r\n                if (!doctorsRes.ok) throw new Error('Failed to fetch doctors');\r\n                setDoctors(await doctorsRes.json());\r\n\r\n                // SalesMen\r\n                // const salesMenRes = await fetch(`${API_BASE}/api/SalesMen`);\r\n                // if (!salesMenRes.ok) throw new Error('Failed to fetch sales men');\r\n                // setSalesMen(await salesMenRes.json());\r\n\r\n                // Medicine Batches - For Sales: sorted by expiry, non-expired, with current stock\r\n                const batchesRes = await fetch(`${API_BASE}/api/MedicineBatches/sales-batches`);\r\n                if (!batchesRes.ok) throw new Error('Failed to fetch medicine batches');\r\n                setMedicineBatches(await batchesRes.json());\r\n\r\n            } catch (error) {\r\n                console.error('Error fetching master data:', error);\r\n                showAlert('Error fetching master data.');\r\n            }\r\n        };\r\n        fetchMasterData();\r\n    }, []);\r\n\r\n    // Function to get filtered items for SearchableSelect\r\n    const getFilteredItems = useCallback((data: any[], searchTerm: string, keyField: string, nameField: string) => {\r\n        if (!searchTerm) return data;\r\n        const lowerCaseSearchTerm = searchTerm.toLowerCase();\r\n        return data.filter(item =>\r\n            item[keyField]?.toString().toLowerCase().includes(lowerCaseSearchTerm) ||\r\n            item[nameField]?.toLowerCase().includes(lowerCaseSearchTerm)\r\n        );\r\n    }, []);\r\n\r\n    // Filtered medicines for the custom dropdown\r\n    const filteredMedicines = useMemo(() => {\r\n        if (!medicineSearchInput) return medicines;\r\n        const lowerCaseSearchTerm = medicineSearchInput.toLowerCase();\r\n        return medicines.filter(m =>\r\n            m.itemCode.toLowerCase().includes(lowerCaseSearchTerm) ||\r\n            m.medicineName.toLowerCase().includes(lowerCaseSearchTerm)\r\n        );\r\n    }, [medicines, medicineSearchInput]);\r\n\r\n    // Add new item row to the sales bill\r\n    const addItem = () => {\r\n        if (isCancelled || isFinalized) {\r\n            showAlert(\"This bill is finalized or cancelled. Items cannot be added.\");\r\n            return;\r\n        }\r\n\r\n        const currentInputItem = salesBill.items[salesBill.items.length - 1];\r\n\r\n        // Basic validation for the item being added\r\n        if (!currentInputItem.medicineId || !currentInputItem.batchNo || currentInputItem.qty <= 0) {\r\n            showAlert(\"Please ensure Item Code, Batch No, and Quantity are filled for the current item before adding a new one.\");\r\n            return;\r\n        }\r\n        if (currentInputItem.qty > (currentInputItem.currentStockAtSelection || 0)) {\r\n            showAlert(`Quantity for ${currentInputItem.productInfo} (${currentInputItem.batchNo}) exceeds available stock (${currentInputItem.currentStockAtSelection}).`);\r\n            return;\r\n        }\r\n\r\n\r\n        // Move current input item into the confirmed list (if it's not empty)\r\n        // No explicit 'push' needed here, as the state update logic below creates a new item\r\n        // and current item is effectively \"moved\" by being replaced in the UI with a new empty one.\r\n\r\n        // Create a new empty item for the next input\r\n        const newItem: SaleItem = {\r\n            id: Date.now(), // Unique ID for client-side rendering\r\n            itemCode: '',\r\n            productInfo: '',\r\n            medicineId: 0,\r\n            packItem: 0,\r\n            batchNo: '',\r\n            expiryDate: '',\r\n            qty: 0, // Default to 0 for new entry\r\n            free: 0,\r\n            price: 0,\r\n            discPercent: 0,\r\n            discAmt: 0,\r\n            mrp: 0,\r\n            amount: 0,\r\n            gst: 0,\r\n            gstAmount: 0,\r\n            hsnCode: '',\r\n            currentStockAtSelection: 0,\r\n            purchaseRate: 0,\r\n            type: '',\r\n        };\r\n\r\n        setSalesBill(prev => ({\r\n            ...prev,\r\n            items: [...prev.items, newItem] // Add the new empty item at the end\r\n        }));\r\n\r\n        // Focus on the new item's itemCode input\r\n        setTimeout(() => {\r\n            const newItemId = newItem.id;\r\n            const refKey = `itemCode-${newItemId}`;\r\n            inputRefs.current[refKey]?.focus();\r\n        }, 100);\r\n    };\r\n\r\n    // Remove item from the sales bill\r\n    const removeItem = (itemId: number) => {\r\n        if (isCancelled || isFinalized) {\r\n            showAlert(\"This bill is finalized or cancelled. Items cannot be deleted.\");\r\n            return;\r\n        }\r\n        setSalesBill(prev => {\r\n            const updatedItems = prev.items.filter(item => item.id !== itemId);\r\n            // Ensure there's always at least one empty item row for input\r\n            if (updatedItems.length === 0) {\r\n                updatedItems.push({\r\n                    id: Date.now(),\r\n                    itemCode: '', productInfo: '', medicineId: 0, packItem: 0, batchNo: '', expiryDate: '',\r\n                    qty: 0, free: 0, price: 0, discPercent: 0, discAmt: 0, mrp: 0, amount: 0, gst: 0, gstAmount: 0,\r\n                    hsnCode: '', currentStockAtSelection: 0, purchaseRate: 0, type: '',\r\n                });\r\n            }\r\n            return {\r\n                ...prev,\r\n                items: updatedItems\r\n            };\r\n        });\r\n    };\r\n\r\n    // Recalculate item totals\r\n    const calculateItemTotals = useCallback((item: SaleItem, currentTaxType: 'intra' | 'inter'): SaleItem => {\r\n        const updatedItem = { ...item };\r\n\r\n        const baseBeforeDiscount = updatedItem.qty * updatedItem.price;\r\n        const discountAmount = (baseBeforeDiscount * (updatedItem.discPercent || 0)) / 100;\r\n        updatedItem.discAmt = parseFloat(discountAmount.toFixed(2));\r\n\r\n        const priceAfterDiscount = baseBeforeDiscount - updatedItem.discAmt;\r\n        updatedItem.baseAmount = parseFloat(priceAfterDiscount.toFixed(2)); // Base amount after discount\r\n\r\n        const gstAmount = (updatedItem.baseAmount * updatedItem.gst) / 100;\r\n        updatedItem.gstAmount = parseFloat(gstAmount.toFixed(2));\r\n\r\n        if (currentTaxType === 'intra') {\r\n            updatedItem.cgstAmount = parseFloat((gstAmount / 2).toFixed(2));\r\n            updatedItem.sgstAmount = parseFloat((gstAmount / 2).toFixed(2));\r\n            updatedItem.igstAmount = 0;\r\n        } else {\r\n            updatedItem.cgstAmount = 0;\r\n            updatedItem.sgstAmount = 0;\r\n            updatedItem.igstAmount = parseFloat(gstAmount.toFixed(2));\r\n        }\r\n\r\n        updatedItem.amount = parseFloat((updatedItem.baseAmount + updatedItem.gstAmount).toFixed(2));\r\n\r\n        return updatedItem;\r\n    }, []);\r\n\r\n    // Update individual item field\r\n    const updateItem = useCallback((itemId: number, field: keyof SaleItem, value: any) => {\r\n        setSalesBill(prev => {\r\n            const updatedItems = prev.items.map(item => {\r\n                if (item.id === itemId) {\r\n                    let updatedItem = { ...item, [field]: value };\r\n\r\n                    // Handle specific field updates and then recalculate\r\n                    if (field === 'itemCode') {\r\n                        const selectedMedicine = medicines.find(m => m.itemCode === value);\r\n                        if (selectedMedicine) {\r\n                            updatedItem.medicineId = selectedMedicine.id;\r\n                            updatedItem.productInfo = selectedMedicine.medicineName;\r\n                            updatedItem.packItem = selectedMedicine.packItem;\r\n                            updatedItem.price = selectedMedicine.salesRate; // Sales Rate\r\n                            updatedItem.gst = selectedMedicine.gst;\r\n                            updatedItem.hsnCode = selectedMedicine.hsnCode;\r\n                            updatedItem.purchaseRate = selectedMedicine.purchaseRate; // Purchase Rate\r\n                            updatedItem.type = selectedMedicine.type; // Type\r\n\r\n                            // Reset batch info as medicine changed\r\n                            updatedItem.batchNo = '';\r\n                            updatedItem.expiryDate = '';\r\n                            updatedItem.mrp = 0;\r\n                            updatedItem.currentStockAtSelection = 0;\r\n                            updatedItem.qty = 0; // Reset quantity when medicine changes\r\n                            updatedItem.free = 0; // Reset free qty\r\n                            updatedItem.discPercent = 0; // Reset discount\r\n                        } else {\r\n                            // Clear related fields if itemCode is cleared or invalid\r\n                            updatedItem.medicineId = 0;\r\n                            updatedItem.productInfo = '';\r\n                            updatedItem.packItem = 0;\r\n                            updatedItem.price = 0;\r\n                            updatedItem.gst = 0;\r\n                            updatedItem.hsnCode = '';\r\n                            updatedItem.batchNo = '';\r\n                            updatedItem.expiryDate = '';\r\n                            updatedItem.mrp = 0;\r\n                            updatedItem.currentStockAtSelection = 0;\r\n                            updatedItem.qty = 0;\r\n                            updatedItem.free = 0;\r\n                            updatedItem.discPercent = 0;\r\n                            updatedItem.discAmt = 0;\r\n                            updatedItem.amount = 0;\r\n                            updatedItem.gstAmount = 0;\r\n                            updatedItem.cgstAmount = 0;\r\n                            updatedItem.sgstAmount = 0;\r\n                            updatedItem.igstAmount = 0;\r\n                            updatedItem.purchaseRate = 0;\r\n                            updatedItem.type = '';\r\n                        }\r\n                    } else if (field === 'batchNo') {\r\n                        const selectedBatch = medicineBatches.find(b => b.batchNo === value && b.medicineId === updatedItem.medicineId);\r\n                        if (selectedBatch) {\r\n                            updatedItem.expiryDate = selectedBatch.expiryDate;\r\n                            updatedItem.mrp = selectedBatch.mrp;\r\n                            updatedItem.currentStockAtSelection = selectedBatch.currentStock;\r\n                        } else {\r\n                            updatedItem.expiryDate = '';\r\n                            updatedItem.mrp = 0;\r\n                            updatedItem.currentStockAtSelection = 0;\r\n                        }\r\n                    } else if (['qty', 'free', 'price', 'discPercent', 'mrp'].includes(field as string)) {\r\n                        (updatedItem as any)[field] = parseFloat(value) || 0;\r\n                    }\r\n\r\n                    // Recalculate item specific totals\r\n                    return calculateItemTotals(updatedItem, prev.taxType || 'intra');\r\n                }\r\n                return item;\r\n            });\r\n\r\n            // Recalculate overall bill totals based on ALL items (excluding the last input item if it's empty)\r\n            const itemsForTotalCalculation = updatedItems.filter((item, index) =>\r\n                !(index === updatedItems.length - 1 && item.medicineId === 0 && item.itemCode === '')\r\n            );\r\n\r\n            const grossTotal = itemsForTotalCalculation.reduce((sum, item) => sum + (item.qty * item.price), 0);\r\n            const totalDiscountAmount = itemsForTotalCalculation.reduce((sum, item) => sum + (item.discAmt || 0), 0);\r\n            const gstTotal = itemsForTotalCalculation.reduce((sum, item) => sum + (item.gstAmount || 0), 0);\r\n            const cgst = itemsForTotalCalculation.reduce((sum, item) => sum + (item.cgstAmount || 0), 0);\r\n            const sgst = itemsForTotalCalculation.reduce((sum, item) => sum + (item.sgstAmount || 0), 0);\r\n            const igst = itemsForTotalCalculation.reduce((sum, item) => sum + (item.igstAmount || 0), 0);\r\n\r\n            const actualTotalExcludingRoundOff = (grossTotal - totalDiscountAmount + gstTotal + prev.cessAmount);\r\n            const roundedTotal = Math.round(actualTotalExcludingRoundOff * 100) / 100; // Round to 2 decimals\r\n            const roundOff = parseFloat((roundedTotal - actualTotalExcludingRoundOff).toFixed(2));\r\n            const finalTotal = roundedTotal;\r\n\r\n            return {\r\n                ...prev,\r\n                items: updatedItems,\r\n                grossTotal: parseFloat(grossTotal.toFixed(2)),\r\n                discount: parseFloat(totalDiscountAmount.toFixed(2)),\r\n                gstTotal: parseFloat(gstTotal.toFixed(2)),\r\n                cgst: parseFloat(cgst.toFixed(2)),\r\n                sgst: parseFloat(sgst.toFixed(2)),\r\n                igst: parseFloat(igst.toFixed(2)),\r\n                roundOff: roundOff,\r\n                finalTotal: parseFloat(finalTotal.toFixed(2)),\r\n            };\r\n        });\r\n    }, [medicines, medicineBatches, calculateItemTotals]);\r\n\r\n\r\n    // Function to select medicine from the custom dropdown\r\n    const selectMedicine = useCallback((selectedMed: Medicine, itemId: number) => {\r\n        updateItem(itemId, 'itemCode', selectedMed.itemCode);\r\n        setMedicineSearchInput(''); // Clear search input\r\n        setShowMedicineDropdown(null); // Close dropdown\r\n    }, [updateItem]);\r\n\r\n    // Close custom medicine dropdown when clicking outside\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (medicineDropdownRef.current && !medicineDropdownRef.current.contains(event.target as Node)) {\r\n                setShowMedicineDropdown(null);\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, []);\r\n\r\n    // Fetch and prefill bill data for edit mode\r\n    useEffect(() => {\r\n        async function fetchAndPrefillSalesBill() {\r\n            if (!editId) return; // Only run in edit mode\r\n\r\n            try {\r\n                // Fetch sales bill details\r\n                const billRes = await fetch(`${API_BASE}/api/SalesBills/${editId}`);\r\n                if (!billRes.ok) throw new Error('Failed to fetch Sales Bill for editing');\r\n                const data = await billRes.json();\r\n\r\n                // Prefill main bill details\r\n                setSalesBill(prev => ({\r\n                    ...prev,\r\n                    billNo: data.billNo ?? 0,\r\n                    date: data.date?.split(\"T\")[0] ?? new Date().toISOString().split('T')[0],\r\n                    customerName: data.customerName ?? '',\r\n                    mobileNo: data.mobileNo ?? '',\r\n                    doctorId: data.doctorId ?? 0,\r\n                    doctorName: data.doctorName ?? '',\r\n                    salesManId: data.salesManId ?? 0,\r\n                    salesManName: data.salesManName ?? '',\r\n                    paymentType: data.paymentType ?? 'Cash',\r\n                    grossTotal: data.grossTotal ?? 0,\r\n                    gstTotal: data.gstTotal ?? 0,\r\n                    roundOff: data.roundOff ?? 0,\r\n                    discount: data.discount ?? 0,\r\n                    cgst: data.cgst ?? 0,\r\n                    sgst: data.sgst ?? 0,\r\n                    igst: data.igst ?? 0,\r\n                    cessAmount: data.cessAmount ?? 0,\r\n                    finalTotal: data.finalTotal ?? 0,\r\n                    taxType: data.taxType ?? 'intra',\r\n                    isCancelled: data.isCancelled ?? false,\r\n                    // Enrich items for the table display\r\n                    items: data.items.map((item: any) => {\r\n                        const matchedMedicine = medicines.find(m => m.id === item.medicineId);\r\n                        const matchedBatch = medicineBatches.find(b => b.medicineId === item.medicineId && b.batchNo === item.batchNo);\r\n                        return {\r\n                            id: item.id || Date.now(), // Use existing ID or generate\r\n                            itemCode: matchedMedicine?.itemCode ?? '',\r\n                            productInfo: matchedMedicine?.medicineName ?? '',\r\n                            medicineId: item.medicineId,\r\n                            packItem: matchedMedicine?.packItem ?? 0,\r\n                            batchNo: item.batchNo,\r\n                            expiryDate: item.expiryDate,\r\n                            qty: item.qty,\r\n                            free: item.free,\r\n                            price: item.price, // Sales rate from saved bill\r\n                            discPercent: item.discPercent,\r\n                            discAmt: item.discAmt,\r\n                            mrp: item.mrp,\r\n                            amount: item.totalAmount, // Already calculated total for this item\r\n                            gst: matchedMedicine?.gst ?? 0,\r\n                            gstAmount: item.gstAmount,\r\n                            cgstAmount: item.cgstAmount,\r\n                            sgstAmount: item.sgstAmount,\r\n                            igstAmount: item.igstAmount,\r\n                            hsnCode: matchedMedicine?.hsnCode ?? '',\r\n                            currentStockAtSelection: matchedBatch?.currentStock ?? 0,\r\n                            purchaseRate: matchedMedicine?.purchaseRate ?? 0, // from medicine\r\n                            type: matchedMedicine?.type ?? '', // from medicine\r\n                        };\r\n                    }).concat([{ // Add one empty row for new input at the end\r\n                        id: Date.now(),\r\n                        itemCode: '', productInfo: '', medicineId: 0, packItem: 0, batchNo: '', expiryDate: '',\r\n                        qty: 0, free: 0, price: 0, discPercent: 0, discAmt: 0, mrp: 0, amount: 0, gst: 0, gstAmount: 0,\r\n                        hsnCode: '', currentStockAtSelection: 0, purchaseRate: 0, type: '',\r\n                    }]),\r\n                }));\r\n            } catch (err) {\r\n                console.error(\"Error while pre-filling sales bill:\", err);\r\n                showAlert(\"Error loading sales bill for editing.\");\r\n            }\r\n        }\r\n\r\n        // Only fetch if master data is loaded, otherwise prefill logic might fail to enrich items correctly\r\n        if (editId && medicines.length > 0 && medicineBatches.length > 0) {\r\n            fetchAndPrefillSalesBill();\r\n        }\r\n    }, [editId, medicines, medicineBatches]); // Depend on master data to ensure it's loaded before prefilling\r\n\r\n    // Save Sales Bill\r\n    const saveSalesBill = async () => {\r\n        if (isCancelled || isFinalized) {\r\n            showAlert(\"This bill is finalized or cancelled and cannot be modified.\");\r\n            return;\r\n        }\r\n\r\n        // Filter out the last empty item row (if it's truly empty) before sending\r\n        const itemsToSave = salesBill.items.filter(item =>\r\n            item.medicineId !== 0 || item.itemCode !== ''\r\n        );\r\n\r\n        // Basic validation after filtering empty row\r\n        if (itemsToSave.length === 0 || itemsToSave.some(item => !item.medicineId || !item.batchNo || item.qty <= 0)) {\r\n            showAlert('Please fill in all required fields and add at least one valid item.');\r\n            return;\r\n        }\r\n        if (itemsToSave.some(item => item.qty > (item.currentStockAtSelection || 0))) {\r\n            showAlert('Quantity cannot exceed available stock for some items.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Prepare payload for API\r\n            const payload = {\r\n                ...salesBill,\r\n                items: itemsToSave.map(item => ({\r\n                    medicineId: item.medicineId,\r\n                    batchNo: item.batchNo,\r\n                    expiryDate: item.expiryDate,\r\n                    qty: item.qty,\r\n                    free: item.free,\r\n                    price: item.price, // This is the S.rate\r\n                    discPercent: item.discPercent,\r\n                    discAmt: item.discAmt,\r\n                    mrp: item.mrp,\r\n                    gst: item.gst,\r\n                    gstAmount: item.gstAmount,\r\n                    cgstAmount: item.cgstAmount,\r\n                    sgstAmount: item.sgstAmount,\r\n                    igstAmount: item.igstAmount,\r\n                    totalAmount: item.amount,\r\n                    hsnCode: item.hsnCode,\r\n                })),\r\n                doctorId: salesBill.doctorId === 0 && salesBill.doctorName ? null : salesBill.doctorId,\r\n                salesManId: salesBill.salesManId === 0 && salesBill.salesManName ? null : salesBill.salesManId,\r\n            };\r\n\r\n            const res = await fetch(`${API_BASE}/api/SalesBills`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(payload),\r\n            });\r\n\r\n            if (!res.ok) {\r\n                const errMessage = await res.text();\r\n                throw new Error(`Failed to save sales bill: ${errMessage}`);\r\n            }\r\n\r\n            const savedBill = await res.json();\r\n            setSalesBill(prev => ({ ...prev, billNo: savedBill.billNo }));\r\n\r\n            showAlert('Sales bill saved successfully!');\r\n            setTimeout(() => {\r\n                showAlert('Sales bill saved successfully!');\r\n                // Reset the form to a fresh state after successful save\r\n                setSalesBill({\r\n                    billNo: 0,\r\n                    date: new Date().toISOString().split('T')[0],\r\n                    customerName: '',\r\n                    mobileNo: '',\r\n                    doctorId: 0,\r\n                    doctorName: '',\r\n                    salesManId: 0,\r\n                    salesManName: '',\r\n                    paymentType: 'Cash',\r\n                    items: [\r\n                        {\r\n                            id: Date.now(), itemCode: '', productInfo: '', medicineId: 0, packItem: 0, batchNo: '', expiryDate: '',\r\n                            qty: 0, free: 0, price: 0, discPercent: 0, discAmt: 0, mrp: 0, amount: 0, gst: 0, gstAmount: 0,\r\n                            hsnCode: '', currentStockAtSelection: 0, purchaseRate: 0, type: '',\r\n                        }\r\n                    ],\r\n                    grossTotal: 0, gstTotal: 0, roundOff: 0, discount: 0, cgst: 0, sgst: 0, igst: 0, cessAmount: 0, finalTotal: 0,\r\n                    taxType: 'intra',\r\n                });\r\n                // Fetch new bill number for the next entry\r\n                const fetchNewBillNo = async () => {\r\n                    try {\r\n                        const res = await fetch(`${API_BASE}/api/SalesBills/bill-no`);\r\n                        if (!res.ok) throw new Error('Failed to fetch Bill No');\r\n                        const newId = await res.json();\r\n                        setSalesBill(prev => ({ ...prev, billNo: newId }));\r\n                    } catch (error) {\r\n                        console.error('Error fetching new Bill No:', error);\r\n                        showAlert('Error fetching new Bill No.');\r\n                    }\r\n                };\r\n                fetchNewBillNo();\r\n            }, 600);\r\n        } catch (err) {\r\n            console.error('Failed to save sales bill:', err);\r\n            showAlert(`Failed to save sales bill: ${(err as Error).message}`);\r\n        }\r\n    };\r\n\r\n    // Cancel Sales Bill\r\n    const cancelSalesBill = async () => {\r\n        showConfirm('Are you sure you want to cancel this bill? This action cannot be undone.', async () => {\r\n            try {\r\n                const res = await fetch(`${API_BASE}/api/SalesBills/${salesBill.billNo}/cancel`, {\r\n                    method: 'PUT'\r\n                });\r\n\r\n                if (!res.ok) throw new Error('Failed to cancel bill');\r\n\r\n                setSalesBill(prev => ({\r\n                    ...prev,\r\n                    isCancelled: true,\r\n                    items: prev.items.map(item => ({\r\n                        ...item,\r\n                        productInfo: `[CANCELLED] ${item.productInfo}`\r\n                    }))\r\n                }));\r\n\r\n                showAlert('Sales bill marked as CANCELLED!');\r\n                setTimeout(() => closeModal(), 600);\r\n            } catch (error) {\r\n                console.error('Error cancelling bill:', error);\r\n                showAlert(`Failed to cancel sales bill: ${(error as Error).message}`);\r\n            } finally {\r\n                closeModal();\r\n            }\r\n        });\r\n    };\r\n\r\n    // Expiry date formatting (MM-YYYY)\r\n    const formatExpiry = (value: string) => {\r\n        if (!value) return '';\r\n        const [year, month] = value.split('-');\r\n        return `${month}-${year}`;\r\n    };\r\n\r\n    // Handle expiry date input (MMYY format)\r\n    const handleExpiryChange = (input: string, itemId: number) => {\r\n        const cleaned = input.replace(/[^\\d]/g, ''); // Only digits\r\n\r\n        let month = cleaned.slice(0, 2);\r\n        let year = cleaned.slice(2, 6);\r\n\r\n        // Ensure month is two digits, adding leading zero if necessary and value > 1\r\n        if (month.length === 1 && parseInt(month) > 1) {\r\n            month = '0' + month;\r\n        }\r\n\r\n        const formattedInput = [month, year].filter(Boolean).join('-');\r\n        setSearchTerms(prev => ({ ...prev, [`expiry-${itemId}`]: formattedInput }));\r\n\r\n        // If full valid date (MM-YYYY), update the item\r\n        if (month.length === 2 && year.length === 4) {\r\n            const monthNum = parseInt(month, 10);\r\n            const yearNum = parseInt(year, 10);\r\n            const currentYear = new Date().getFullYear();\r\n            if (monthNum >= 1 && monthNum <= 12 && yearNum >= currentYear) {\r\n                const dateValue = `${year}-${month}-01`; // Store as YYYY-MM-DD\r\n                updateItem(itemId, 'expiryDate', dateValue);\r\n                setSearchTerms(prev => {\r\n                    const copy = { ...prev };\r\n                    delete copy[`expiry-${itemId}`];\r\n                    return copy;\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 font-sans\">\r\n            {modalMessage && (\r\n                <CustomModal\r\n                    message={modalMessage}\r\n                    onClose={closeModal}\r\n                    onConfirm={modalCallback || undefined}\r\n                    type={modalType}\r\n                />\r\n            )}\r\n\r\n            {/* Header */}\r\n            <div className=\"bg-gradient-to-r from-blue-600 to-blue-800 text-white p-4 sm:p-6 shadow-lg\">\r\n                <h1 className=\"text-4xl font-light mb-3 text-center\">Sales Bill</h1>\r\n            </div>\r\n\r\n            {/* Form Section */}\r\n            <div className=\"p-2 sm:p-3 lg:p-4 bg-white shadow-md rounded-lg mx-auto my-4 max-w-7xl\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    {/* First Vertical Line */}\r\n                    <div className=\"space-y-3\">\r\n                        {/* Bill No & Bill Date */}\r\n                        <div className=\"flex gap-x-4\">\r\n                            {/* Bill No */}\r\n                            <div className=\"w-40\">\r\n                                <label className=\"block text-xs font-semibold text-blue-900 mb-1\">Bill No</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"billNo\"\r\n                                    value={salesBill.billNo}\r\n                                    readOnly\r\n                                    className=\"w-full px-2 py-1 text-sm border border-blue-300 rounded-md bg-blue-50 text-blue-900 font-medium focus:outline-none\"\r\n                                />\r\n                            </div>\r\n\r\n                            {/* Bill Date */}\r\n                            <div className=\"w-40\">\r\n                                <label className=\"block text-xs font-semibold text-blue-900 mb-1\">Bill Date</label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    value={salesBill.date}\r\n                                    onChange={(e) => setSalesBill((prev) => ({ ...prev, date: e.target.value }))}\r\n                                    className=\"w-full px-2 py-1 text-sm border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                                    disabled={isCancelled || isFinalized}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Payment Type */}\r\n                        <div className=\"w-40\">\r\n                            <label className=\"block text-xs font-semibold text-blue-900 mb-1\">Payment Type</label>\r\n                            <select\r\n                                value={salesBill.paymentType}\r\n                                onChange={(e) => setSalesBill(prev => ({ ...prev, paymentType: e.target.value as SalesBill['paymentType'] }))}\r\n                                className=\"w-full px-2 py-1 text-sm border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white\"\r\n                                disabled={isCancelled || isFinalized}\r\n                            >\r\n                                <option value=\"Cash\">Cash</option>\r\n                                <option value=\"Card\">Card</option>\r\n                                <option value=\"Online\">Online</option>\r\n                                <option value=\"Credit\">Credit</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    {/* Second Vertical Line */}\r\n                    <div className=\"space-y-3\">\r\n                        {/* Customer Name & Mobile No in one row */}\r\n                        <div className=\"flex gap-x-4\">\r\n                            {/* Customer Name */}\r\n                            <div className=\"flex-1\">\r\n                                <label className=\"block text-xs font-semibold text-blue-900 mb-1\">Customer Name</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={salesBill.customerName}\r\n                                    onChange={(e) => setSalesBill(prev => ({ ...prev, customerName: e.target.value }))}\r\n                                    className=\"w-full px-2 py-1.5 text-sm border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                                    placeholder=\"Enter Customer Name\"\r\n                                    disabled={isCancelled || isFinalized}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* Mobile No */}\r\n                            <div className=\"flex-1\">\r\n                                <label className=\"block text-xs font-semibold text-blue-900 mb-1\">Mobile No</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={salesBill.mobileNo}\r\n                                    onChange={(e) => setSalesBill(prev => ({ ...prev, mobileNo: e.target.value }))}\r\n                                    className=\"w-full px-2 py-1.5 text-sm border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                                    placeholder=\"Enter Mobile No\"\r\n                                    disabled={isCancelled || isFinalized}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Doctor & Sales Person in one row */}\r\n                        <div className=\"flex gap-x-4\">\r\n                            {/* Doctor */}\r\n                            <div className=\"flex-1 relative z-20\"> {/* Added relative z-20 here for Doctor dropdown */}\r\n                                <label className=\"block text-xs font-semibold text-blue-900 mb-1\">Doctor</label>\r\n                                <SearchableSelect\r\n                                    label=\"\"\r\n                                    value={salesBill.doctorId.toString()}\r\n                                    searchValue={searchTerms['doctor'] || salesBill.doctorName}\r\n                                    setSearchValue={(val) => {\r\n                                        setSearchTerms(prev => ({ ...prev, doctor: val }));\r\n                                        // ONLY update doctorName during typing, doctorId remains as is until selected\r\n                                        setSalesBill(prev => ({ ...prev, doctorName: val }));\r\n                                    }}\r\n                                    showDropdown={activeDropdown === 'doctor'}\r\n                                    setShowDropdown={(open) => setActiveDropdown(open ? 'doctor' : null)}\r\n                                    items={getFilteredItems(doctors, searchTerms['doctor'] || '', 'id', 'name').map(d => ({\r\n                                        id: d.id.toString(),\r\n                                        name: d.name\r\n                                    }))}\r\n                                    onSelect={(id, name) => {\r\n                                        setSalesBill(prev => ({ ...prev, doctorId: parseInt(id), doctorName: name }));\r\n                                        setSearchTerms(prev => ({ ...prev, doctor: '' }));\r\n                                    }}\r\n                                    renderItem={(item) => (\r\n                                        <div className=\"text-xs font-medium text-gray-700\">{item.name}</div>\r\n                                    )}\r\n                                    placeholder=\"Select or Type Doctor Name\"\r\n                                    isDisabled={isCancelled || isFinalized}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* Sales Person */}\r\n                            <div className=\"flex-1\">\r\n                                <label className=\"block text-xs font-semibold text-blue-900 mb-1\">Sales Person</label>\r\n                                <SearchableSelect\r\n                                    label=\"\"\r\n                                    value={salesBill.salesManId.toString()}\r\n                                    searchValue={searchTerms['salesMan'] || salesBill.salesManName}\r\n                                    setSearchValue={(val) => {\r\n                                        setSearchTerms(prev => ({ ...prev, salesMan: val }));\r\n                                        // ONLY update salesManName during typing, salesManId remains as is until selected\r\n                                        setSalesBill(prev => ({ ...prev, salesManName: val }));\r\n                                    }}\r\n                                    showDropdown={activeDropdown === 'salesMan'}\r\n                                    setShowDropdown={(open) => setActiveDropdown(open ? 'salesMan' : null)}\r\n                                    items={getFilteredItems(salesMen, searchTerms['salesMan'] || '', 'id', 'name').map(sm => ({\r\n                                        id: sm.id.toString(),\r\n                                        name: `${sm.code} - ${sm.name}`\r\n                                    }))}\r\n                                    onSelect={(id, name) => {\r\n                                        const selectedSalesMan = salesMen.find(sm => sm.id.toString() === id);\r\n                                        setSalesBill(prev => ({ ...prev, salesManId: parseInt(id), salesManName: selectedSalesMan?.name || name }));\r\n                                        setSearchTerms(prev => ({ ...prev, salesMan: '' }));\r\n                                    }}\r\n                                    renderItem={(item) => (\r\n                                        <div className=\"text-xs font-medium text-gray-700\">{item.name}</div>\r\n                                    )}\r\n                                    placeholder=\"Select Sales Person\"\r\n                                    isDisabled={isCancelled || isFinalized}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Items Section */}\r\n            <div className=\"p-3 sm:p-4 lg:p-6 bg-gradient-to-r from-blue-50 to-blue-100\">\r\n                <div className=\"flex flex-col sm:flex-row justify-between items-center mb-4\">\r\n                    <h2 className=\"text-xl sm:text-2xl font-bold text-blue-900 mb-2 sm:mb-0\">Items</h2>\r\n                    {/* Add Item button is now below the table, this is for overall clarity if needed */}\r\n                </div>\r\n\r\n                {/* Items Table - Adjusted structure for dropdown visibility */}\r\n                <div className=\"bg-white rounded-lg shadow-lg relative z-10\"> {/* Keep this as relative and z-10 */}\r\n                    <div className=\"overflow-x-auto\"> {/* This div will scroll the table horizontally */}\r\n                        <table className=\"min-w-[1200px] w-full border border-blue-300 text-xs sm:text-sm\">\r\n                            <thead className=\"bg-gradient-to-r from-blue-600 to-blue-800 text-white\">\r\n                                <tr>\r\n                                    <th className=\"px-2 py-3 text-left text-xs sm:text-sm font-medium border-r border-blue-500 w-[8%]\">Item Code</th>\r\n                                    <th className=\"px-2 py-3 text-left text-xs sm:text-sm font-medium border-r border-blue-500 w-[15%]\">Medicine Name</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[5%]\">Type</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[5%]\">Pack Item</th>\r\n                                    <th className=\"px-2 py-3 text-left text-xs sm:text-sm font-medium border-r border-blue-500 w-[10%]\">Batch No</th>\r\n                                    <th className=\"px-2 py-3 text-left text-xs sm:text-sm font-medium border-r border-blue-500 w-[8%]\">Expiry</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[5%]\">Qty</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[5%]\">Free</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[5%]\">Disc %</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[7%]\">P.Rate</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[7%]\">S.Rate</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[7%]\">MRP</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[5%]\">GST%</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[7%]\">Amount</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium border-r border-blue-500 w-[5%]\">HSN</th>\r\n                                    <th className=\"px-2 py-3 text-center text-xs sm:text-sm font-medium w-[5%]\">Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {salesBill.items.map((item, index) => {\r\n                                    const isLastItem = index === salesBill.items.length - 1;\r\n                                    const medicineInfo = medicines.find(m => m.id === item.medicineId);\r\n\r\n                                    return (\r\n                                        <tr key={item.id} className={`${index % 2 === 0 ? 'bg-blue-50' : 'bg-white'} hover:bg-blue-100 transition-colors duration-200`}>\r\n                                            {/* Item Code (Custom Dropdown for last row, text for others) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-xs sm:text-sm relative z-20\" ref={medicineDropdownRef}>\r\n                                                {isLastItem ? (\r\n                                                    <>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Search medicine\"\r\n                                                            value={item.itemCode || medicineSearchInput}\r\n                                                            onChange={(e) => {\r\n                                                                setMedicineSearchInput(e.target.value);\r\n                                                                // Clear itemCode if user starts typing a new search\r\n                                                                updateItem(item.id, 'itemCode', '');\r\n                                                                setShowMedicineDropdown(item.id);\r\n                                                            }}\r\n                                                            onFocus={() => setShowMedicineDropdown(item.id)}\r\n                                                            onKeyDown={(e) => {\r\n                                                                if (e.key === 'Enter' && filteredMedicines.length > 0) {\r\n                                                                    selectMedicine(filteredMedicines[0], item.id);\r\n                                                                    e.preventDefault(); // Prevent form submission\r\n                                                                }\r\n                                                            }}\r\n                                                            className=\"w-40 border border-blue-300 rounded px-2 py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                                                            disabled={isCancelled || isFinalized}\r\n                                                            ref={el => { inputRefs.current[`itemCode-${item.id}`] = el }}\r\n                                                        />\r\n\r\n                                                        {showMedicineDropdown === item.id && (\r\n                                                            <div className=\"absolute z-50 mt-1 w-full bg-white border border-blue-300 rounded shadow max-h-48 overflow-y-auto\">\r\n                                                                {filteredMedicines.length > 0 ? (\r\n                                                                    filteredMedicines.map((m) => (\r\n                                                                        <div\r\n                                                                            key={m.id}\r\n                                                                            className=\"px-3 py-2 hover:bg-blue-100 text-sm cursor-pointer\"\r\n                                                                            onMouseDown={() => selectMedicine(m, item.id)} // Use onMouseDown to prevent blur\r\n                                                                        >\r\n                                                                            {m.itemCode} - {m.medicineName}\r\n                                                                        </div>\r\n                                                                    ))\r\n                                                                ) : (\r\n                                                                    <div className=\"px-3 py-2 text-sm text-gray-500\">No results found</div>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <span>{item.itemCode}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            {/* Product Info (Read-only) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-xs sm:text-sm\">\r\n                                                <span>{item.productInfo}</span>\r\n                                            </td>\r\n                                            {/* Type (Read-only) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm\">\r\n                                                <span>{item.type || medicineInfo?.type || ''}</span>\r\n                                            </td>\r\n                                            {/* Pack Item (Read-only) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm\">\r\n                                                <span>{item.packItem || medicineInfo?.packItem || ''}</span>\r\n                                            </td>\r\n                                            {/* Batch No (SearchableSelect for last row, text for others) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-xs sm:text-sm relative z-20\"> {/* Added relative z-20 here */}\r\n                                                {isLastItem ? (\r\n                                                    <SearchableSelect\r\n                                                        label=\"\"\r\n                                                        value={item.batchNo || ''}\r\n                                                        searchValue={searchTerms[`batchNo-${item.id}`] || ''}\r\n                                                        setSearchValue={(val) => setSearchTerms(prev => ({ ...prev, [`batchNo-${item.id}`]: val }))}\r\n                                                        showDropdown={activeDropdown === `batchNo-${item.id}`}\r\n                                                        setShowDropdown={(open) => setActiveDropdown(open ? `batchNo-${item.id}` : null)}\r\n                                                        items={\r\n                                                            medicineBatches\r\n                                                                .filter(batch =>\r\n                                                                    batch.medicineId === item.medicineId &&\r\n                                                                    batch.batchNo.toLowerCase().includes(searchTerms[`batchNo-${item.id}`]?.toLowerCase() || '') &&\r\n                                                                    new Date(batch.expiryDate) >= new Date() // Filter out expired items\r\n                                                                )\r\n                                                                .sort((a, b) => new Date(a.expiryDate).getTime() - new Date(b.expiryDate).getTime()) // Sort by expiry\r\n                                                                .map(b => ({\r\n                                                                    id: b.batchNo,\r\n                                                                    name: `${b.batchNo} (Stock: ${b.currentStock})`,\r\n                                                                    isLowStock: b.currentStock === 0\r\n                                                                }))\r\n                                                        }\r\n                                                        onSelect={(batchNo, name) => {\r\n                                                            const selectedBatch = medicineBatches.find(\r\n                                                                b => b.medicineId === item.medicineId && b.batchNo === batchNo\r\n                                                            );\r\n\r\n                                                            if (selectedBatch) {\r\n                                                                updateItem(item.id, 'batchNo', selectedBatch.batchNo);\r\n                                                                updateItem(item.id, 'expiryDate', selectedBatch.expiryDate);\r\n                                                                updateItem(item.id, 'price', selectedBatch.salesRate); // Sales rate\r\n                                                                updateItem(item.id, 'mrp', selectedBatch.mrp); // MRP from batch\r\n                                                                updateItem(item.id, 'currentStockAtSelection', selectedBatch.currentStock); // Stock at selection\r\n                                                            }\r\n\r\n                                                            setSearchTerms(prev => ({ ...prev, [`batchNo-${item.id}`]: '' }));\r\n                                                        }}\r\n                                                        renderItem={(b) => (\r\n                                                            <div className={`text-xs font-medium ${b.isLowStock ? 'text-red-600 font-bold' : 'text-gray-700'}`}>\r\n                                                                {b.name}\r\n                                                            </div>\r\n                                                        )}\r\n                                                        placeholder=\"Batch\"\r\n                                                        isDisabled={isCancelled || isFinalized || !item.medicineId}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <span>{item.batchNo}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            {/* Expiry Date (Input for last row, text for others) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-xs sm:text-sm\">\r\n                                                {isLastItem ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={item.expiryDate ? formatExpiry(item.expiryDate) : (searchTerms[`expiry-${item.id}`] || '')}\r\n                                                        onChange={(e) => handleExpiryChange(e.target.value, item.id)}\r\n                                                        placeholder=\"MM-YYYY\"\r\n                                                        maxLength={7}\r\n                                                        className=\"w-full px-2 py-1 border border-blue-300 rounded text-xs text-center tracking-wider\"\r\n                                                        disabled={isCancelled || isFinalized || !item.batchNo}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <span>{item.expiryDate ? formatExpiry(item.expiryDate) : ''}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            {/* Qty (Input for last row, text for others) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm\">\r\n                                                {isLastItem ? (\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        inputMode=\"numeric\"\r\n                                                        value={item.qty === 0 ? '' : item.qty}\r\n                                                        onFocus={(e) => { if (e.target.value === '0') e.target.value = ''; }}\r\n                                                        onBlur={(e) => {\r\n                                                            const val = parseFloat(e.target.value);\r\n                                                            updateItem(item.id, 'qty', isNaN(val) ? 0 : val);\r\n                                                        }}\r\n                                                        onChange={(e) => {\r\n                                                            const val = e.target.value;\r\n                                                            updateItem(item.id, 'qty', val === '' ? '' : parseFloat(val));\r\n                                                        }}\r\n                                                        className=\"w-full px-1 py-1 border border-blue-300 rounded text-xs\"\r\n                                                        disabled={isCancelled || isFinalized || !item.batchNo}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <span>{item.qty}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            {/* Free (Input for last row, text for others) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm\">\r\n                                                {isLastItem ? (\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        value={item.free}\r\n                                                        onChange={(e) => updateItem(item.id, 'free', e.target.value)}\r\n                                                        min=\"0\"\r\n                                                        className=\"w-full px-1 py-1 border border-blue-300 rounded text-xs text-center\"\r\n                                                        disabled={isCancelled || isFinalized}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <span>{item.free}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            {/* Disc % (Input for last row, text for others) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm\">\r\n                                                {isLastItem ? (\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        min=\"0\"\r\n                                                        max=\"100\"\r\n                                                        value={item.discPercent}\r\n                                                        onChange={(e) => updateItem(item.id, 'discPercent', e.target.value)}\r\n                                                        className=\"w-full px-1 py-1 border border-blue-300 rounded text-xs\"\r\n                                                        disabled={isCancelled || isFinalized}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <span>{item.discPercent.toFixed(2)}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            {/* P.Rate (Read-only for all rows) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm\">\r\n                                                <span>{item.purchaseRate?.toFixed(2)}</span>\r\n                                            </td>\r\n                                            {/* S.Rate (Input for last row, text for others) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm\">\r\n                                                {isLastItem ? (\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        step=\"0.01\"\r\n                                                        value={item.price.toFixed(2)}\r\n                                                        onChange={(e) => updateItem(item.id, 'price', e.target.value)}\r\n                                                        className=\"w-full px-1 py-1 border border-blue-300 rounded text-xs text-center\"\r\n                                                        disabled={isCancelled || isFinalized}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <span>{item.price.toFixed(2)}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            {/* MRP (Input for last row, text for others) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-xs sm:text-sm\">\r\n                                                {isLastItem ? (\r\n                                                    <input\r\n                                                        type=\"number\"\r\n                                                        value={item.mrp}\r\n                                                        onChange={(e) => updateItem(item.id, 'mrp', e.target.value)}\r\n                                                        className=\"w-full px-1 py-1 border border-blue-300 rounded text-xs\"\r\n                                                        disabled={isCancelled || isFinalized}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <span>{item.mrp.toFixed(2)}</span>\r\n                                                )}\r\n                                            </td>\r\n                                            {/* GST% (Read-only) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm\">\r\n                                                <span>{item.gst.toFixed(2)}</span>\r\n                                            </td>\r\n                                            {/* Amount (Read-only) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm font-bold text-green-700\">\r\n                                                <span>â‚¹{item.amount.toFixed(2)}</span>\r\n                                            </td>\r\n                                            {/* HSN (Read-only) */}\r\n                                            <td className=\"px-2 py-2 border-r border-blue-200 text-center text-xs sm:text-sm\">\r\n                                                <span>{item.hsnCode}</span>\r\n                                            </td>\r\n                                            {/* Action (Add for last row, Delete for others) */}\r\n                                            <td className=\"px-2 py-2 text-center text-xs sm:text-sm\">\r\n                                                {isLastItem ? (\r\n                                                    <button\r\n                                                        onClick={addItem}\r\n                                                        className=\"p-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-150 ease-in-out\"\r\n                                                        disabled={isCancelled || isFinalized}\r\n                                                        title=\"Add item\"\r\n                                                    >\r\n                                                        <Plus size={18} />\r\n                                                    </button>\r\n                                                ) : (\r\n                                                    <button\r\n                                                        type=\"button\"\r\n                                                        onClick={() => removeItem(item.id)}\r\n                                                        disabled={isCancelled || isFinalized}\r\n                                                        className={`text-red-600 hover:text-red-800 transition ${isCancelled || isFinalized ? 'opacity-40 cursor-not-allowed' : ''}`}\r\n                                                        title={isCancelled ? 'Bill is cancelled' : isFinalized ? 'Finalized bill cannot be modified' : 'Delete item'}\r\n                                                    >\r\n                                                        <Trash2 className=\"w-4 h-4\" />\r\n                                                    </button>\r\n                                                )}\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                                {/* Display a message if no active items (only the blank input row exists) */}\r\n                                {salesBill.items.length === 1 && salesBill.items[0].medicineId === 0 && (\r\n                                    <tr>\r\n                                        <td colSpan={16} className=\"py-4 text-center text-gray-500 text-base\">\r\n                                            Start by adding an item above.\r\n                                        </td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Summary Calculations */}\r\n            <div className=\"p-3 sm:p-4 lg:p-6 bg-white\">\r\n                <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 p-4 sm:p-6 rounded-lg shadow-md\">\r\n                    <h3 className=\"text-lg sm:text-xl font-bold text-blue-900 mb-4\">Summary</h3>\r\n\r\n                    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6\">\r\n                        {/* Column 1: Tax Details */}\r\n                        <div className=\"space-y-3\">\r\n                            <div className=\"border border-blue-300 rounded-lg overflow-hidden\">\r\n                                <div className=\"bg-blue-600 text-white p-2 text-center font-semibold text-sm\">Tax Details</div>\r\n                                <div className=\"divide-y divide-blue-200\">\r\n                                    <div className=\"flex justify-between items-center p-2 bg-white\">\r\n                                        <span className=\"text-sm font-medium text-blue-900\">GST Total:</span>\r\n                                        <span className=\"text-sm font-bold text-blue-900\">â‚¹{Number(salesBill.gstTotal || 0).toFixed(2)}</span>\r\n                                    </div>\r\n                                    <div className=\"flex justify-between items-center p-2 bg-blue-50\">\r\n                                        <span className=\"text-sm font-medium text-blue-900\">CGST:</span>\r\n                                        <span className=\"text-sm font-bold text-blue-900\">â‚¹{Number(salesBill.cgst || 0).toFixed(2)}</span>\r\n                                    </div>\r\n                                    <div className=\"flex justify-between items-center p-2 bg-white\">\r\n                                        <span className=\"text-sm font-medium text-blue-900\">SGST:</span>\r\n                                        <span className=\"text-sm font-bold text-blue-900\">â‚¹{Number(salesBill.sgst || 0).toFixed(2)}</span>\r\n                                    </div>\r\n                                    <div className=\"flex justify-between items-center p-2 bg-white\">\r\n                                        <span className=\"text-sm font-medium text-blue-900\">IGST:</span>\r\n                                        <span className=\"text-sm font-bold text-blue-900\">â‚¹{Number(salesBill.igst || 0).toFixed(2)}</span>\r\n                                    </div>\r\n                                    <div className=\"flex justify-between items-center p-2 bg-blue-50\">\r\n                                        <span className=\"text-sm font-medium text-blue-900\">Cess Amount:</span>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            step=\"0.01\"\r\n                                            value={salesBill.cessAmount.toFixed(2)}\r\n                                            onChange={(e) => setSalesBill(prev => ({ ...prev, cessAmount: Number(e.target.value) }))}\r\n                                            className=\"w-24 px-2 py-1 text-sm border border-blue-300 rounded text-right font-bold\"\r\n                                            disabled={isCancelled || isFinalized}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Column 2: Amount Details */}\r\n                        <div className=\"space-y-3\">\r\n                            <div className=\"border border-blue-300 rounded-lg overflow-hidden\">\r\n                                <div className=\"bg-blue-600 text-white p-2 text-center font-semibold text-sm\">Amount Details</div>\r\n                                <div className=\"divide-y divide-blue-200\">\r\n                                    <div className=\"flex justify-between items-center p-2 bg-green-50 font-bold\">\r\n                                        <span className=\"text-sm text-green-900\">Gross Total:</span>\r\n                                        <span className=\"text-sm text-green-900\">\r\n                                            â‚¹{Number(salesBill.grossTotal || 0).toFixed(2)}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"flex justify-between items-center p-2 bg-blue-50\">\r\n                                        <span className=\"text-sm font-medium text-blue-900\">Round Off:</span>\r\n                                        <span className=\"text-sm font-bold text-blue-900\">â‚¹{Number(salesBill.roundOff || 0).toFixed(2)}</span>\r\n                                    </div>\r\n                                    <div className=\"flex justify-between items-center p-2 bg-white\">\r\n                                        <span className=\"text-sm font-medium text-blue-900\">Total Discount:</span>\r\n                                        <span className=\"text-sm font-bold text-blue-900\">â‚¹{Number(salesBill.discount || 0).toFixed(2)}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Column 3: Final Total */}\r\n                        <div className=\"lg:flex lg:items-center lg:justify-center\">\r\n                            <div className=\"bg-gradient-to-r from-red-500 to-red-700 text-white p-4 rounded-lg text-center shadow-lg w-full\">\r\n                                <div className=\"text-sm font-medium mb-1\">Final Total</div>\r\n                                <div className=\"text-2xl font-bold\">â‚¹{Number(salesBill.finalTotal || 0).toFixed(2)}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Save + Cancel Buttons */}\r\n            <div className=\"p-3 sm:p-4 lg:p-6 bg-gradient-to-r from-blue-50 to-blue-100\">\r\n                <div className=\"flex justify-center gap-4\">\r\n                    <button\r\n                        onClick={saveSalesBill}\r\n                        className=\"bg-gradient-to-r from-green-600 to-green-800 text-white px-8 py-3 rounded-lg hover:from-green-700 hover:to-green-900 flex items-center gap-2 font-bold text-lg shadow-lg transition-all duration-300\"\r\n                        disabled={isCancelled || isFinalized}\r\n                    >\r\n                        <Save size={20} /> Save Bill\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={cancelSalesBill}\r\n                        className=\"bg-gradient-to-r from-red-600 to-red-800 text-white px-8 py-3 rounded-lg hover:from-red-700 hover:to-red-900 flex items-center gap-2 font-bold text-lg shadow-lg transition-all duration-300\"\r\n                        disabled={isCancelled || isFinalized}\r\n                    >\r\n                        <Trash2 size={20} /> Cancel Bill\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SalesBillPage;"],"names":[],"mappings":"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","debugId":null}}]
}