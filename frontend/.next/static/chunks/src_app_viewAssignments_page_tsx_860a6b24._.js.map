{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/HOSPITALAPP/hospitalapp/src/app/viewAssignments/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useState, useCallback } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { NotebookPen, FilePen, Trash2 } from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport \"./viewAssign.css\";\r\n\r\nconst API_BASE = \"https://localhost:7112\";\r\n\r\ninterface PatientAssignmentDataType {\r\n    id: number;\r\n    assignmentId: string;\r\n    date: string;\r\n    time: string;\r\n    patientId: string;\r\n    doctorId: string;\r\n    volunteerId: string;\r\n    nurseId: string;\r\n    description: string;\r\n}\r\n\r\ninterface PersonDetails {\r\n    id: string;\r\n    name: string;\r\n    phone: string;\r\n    email?: string;\r\n    photo?: string;\r\n    age?: number;\r\n    gender?: string;\r\n    address?: string;\r\n}\r\n\r\ninterface FormErrors {\r\n    [key: string]: string;\r\n}\r\n\r\nexport default function PatientAssignmentsViewPage() {\r\n    const router = useRouter();\r\n    const [assignments, setAssignments] = useState<PatientAssignmentDataType[]>([]);\r\n    const [selectedAssignment, setSelectedAssignment] = useState<PatientAssignmentDataType | null>(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [imageError, setImageError] = useState<{ [key: string]: boolean }>({});\r\n    const [personDetails, setPersonDetails] = useState<{ [key: string]: PersonDetails }>({});\r\n    const recordsPerPage = 10;\r\n\r\n    const fetchAllPersonsData = async () => {\r\n        try { // Use the same endpoints as your form\r\n            const [patientsRes, doctorsRes, volunteersRes, nursesRes] = await Promise.all([\r\n                fetch(`${API_BASE}/api/Hpforms/all-patients`),\r\n                fetch(`${API_BASE}/api/Doctors/all-doctors`),\r\n                fetch(`${API_BASE}/api/Volunteers/all-volunteers`),\r\n                fetch(`${API_BASE}/api/Nurses/all-nurses`)\r\n            ]);\r\n\r\n            console.log('API Response statuses:', {\r\n                patients: patientsRes.status,\r\n                doctors: doctorsRes.status,\r\n                volunteers: volunteersRes.status,\r\n                nurses: nursesRes.status\r\n            });\r\n\r\n            const [patients, doctors, volunteers, nurses] = await Promise.all([\r\n                patientsRes.ok ? patientsRes.json() : [],\r\n                doctorsRes.ok ? doctorsRes.json() : [],\r\n                volunteersRes.ok ? volunteersRes.json() : [],\r\n                nursesRes.ok ? nursesRes.json() : []\r\n            ]);\r\n\r\n            console.log('Fetched data:', { patients, doctors, volunteers, nurses });\r\n\r\n            const allPersons: { [key: string]: PersonDetails } = {};\r\n\r\n            // Process patients - handle multiple possible field names\r\n            patients.forEach((patient: any) => {\r\n                const id = patient.id || patient.pat_Id || patient.patientId;\r\n                if (id) {\r\n                    allPersons[`patient_${id}`] = {\r\n                        id: String(id),\r\n                        name: patient.name || patient.fullName || patient.patName || `Patient ${id}`,\r\n                        phone: patient.phone || patient.phoneNumber || '',\r\n                        email: patient.email || patient.emailAddress || '',\r\n                        photo: patient.photo || patient.profilePhoto || patient.image || '',\r\n                        age: patient.age || patient.patientAge,\r\n                        gender: patient.gender || patient.sex || '',\r\n                        address: patient.address || patient.homeAddress || ''\r\n                    };\r\n                    console.log(`Added patient: ${id} - ${allPersons[`patient_${id}`].name}`);\r\n                }\r\n            });\r\n\r\n            // Process doctors - handle multiple possible field names\r\n            doctors.forEach((doctor: any) => {\r\n                const id = doctor.id || doctor.doctorId || doctor.doc_Id;\r\n                if (id) {\r\n                    const fullName = doctor.name || doctor.fullName || doctor.doctorName ||\r\n                        `${doctor.firstName || ''} ${doctor.lastName || ''}`.trim();\r\n                    allPersons[`doctor_${id}`] = {\r\n                        id: String(id),\r\n                        name: fullName || `Doctor ${id}`,\r\n                        phone: doctor.phone || doctor.phoneNumber || '',\r\n                        email: doctor.email || doctor.emailAddress || '',\r\n                        photo: doctor.photo || doctor.profilePhoto || doctor.image || '',\r\n                        age: doctor.age,\r\n                        gender: doctor.gender || doctor.sex || '',\r\n                        address: doctor.address || doctor.clinicAddress || ''\r\n                    };\r\n                    console.log(`Added doctor: ${id} - ${allPersons[`doctor_${id}`].name}`);\r\n                }\r\n            });\r\n\r\n            // Process volunteers\r\n            volunteers.forEach((volunteer: any) => {\r\n                const id = volunteer.id || volunteer.vol_Id || volunteer.volunteerId;\r\n                if (id) {\r\n                    allPersons[`volunteer_${id}`] = {\r\n                        id: String(id),\r\n                        name: volunteer.name || volunteer.fullName || volunteer.volName || volunteer.volunteerName || `Volunteer ${id}`,\r\n                        phone: volunteer.phone || volunteer.phoneNumber || '',\r\n                        email: volunteer.email || volunteer.emailAddress || '',\r\n                        photo: volunteer.photo || volunteer.profilePhoto || volunteer.image || '',\r\n                        age: volunteer.age,\r\n                        gender: volunteer.gender || volunteer.sex || '',\r\n                        address: volunteer.address || volunteer.homeAddress || ''\r\n                    };\r\n                    console.log(`Added volunteer: ${id} - ${allPersons[`volunteer_${id}`].name}`);\r\n                }\r\n            });\r\n\r\n            // Process nurses\r\n            nurses.forEach((nurse: any) => {\r\n                const id = nurse.id || nurse.nurseId || nurse.nurse_Id;\r\n                if (id) {\r\n                    allPersons[`nurse_${id}`] = {\r\n                        id: String(id),\r\n                        name: nurse.name || nurse.fullName || nurse.nurseName || `Nurse ${id}`,\r\n                        phone: nurse.phone || nurse.phoneNumber || '',\r\n                        email: nurse.email || nurse.emailAddress || '',\r\n                        photo: nurse.photo || nurse.profilePhoto || nurse.image || '',\r\n                        age: nurse.age,\r\n                        gender: nurse.gender || nurse.sex || '',\r\n                        address: nurse.address || nurse.workAddress || ''\r\n                    };\r\n                    console.log(`Added nurse: ${id} - ${allPersons[`nurse_${id}`].name}`);\r\n                }\r\n            });\r\n\r\n            console.log('All persons data:', allPersons);\r\n            return allPersons;\r\n        } catch (error) {\r\n            console.error('Error fetching persons data:', error);\r\n            return {};\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function fetchAssignments() {\r\n            try {\r\n                setLoading(true);\r\n\r\n                const res = await fetch(`${API_BASE}/api/PatientAssignments`);\r\n                if (!res.ok) throw new Error(\"Failed to fetch assignment data\");\r\n\r\n                const data = await res.json();\r\n                setAssignments(data);\r\n\r\n                const allPersons = await fetchAllPersonsData();\r\n                setPersonDetails(allPersons);\r\n\r\n            } catch (err: any) {\r\n                console.error('❌ Error loading assignments:', err.message);\r\n                setError(err.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        fetchAssignments();\r\n    }, []);\r\n\r\n\r\n    const handleDelete = async (id: number, assignmentId: string) => {\r\n        if (!confirm(`Are you sure you want to delete assignment ${assignmentId}? This action cannot be undone.`)) return;\r\n        try {\r\n            const res = await fetch(`${API_BASE}/api/PatientAssignments/${id}`, {\r\n                method: \"DELETE\",\r\n            });\r\n            if (!res.ok) throw new Error(\"Delete failed\");\r\n            setAssignments(assignments.filter((assignment) => assignment.id !== id));\r\n            alert(\"Assignment deleted successfully\");\r\n        } catch (err) {\r\n            alert(\"Error deleting assignment. Please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleEdit = (assignment: PatientAssignmentDataType) => {\r\n        try {\r\n            if (assignment.assignmentId) {\r\n                router.push(`/viewAssignments/assignpatient?edit=true&id=${assignment.assignmentId}`);\r\n            } else {\r\n                console.error(\"assignmentId missing for assignment:\", assignment);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to navigate to edit page\", error);\r\n        }\r\n    };\r\n\r\n\r\n    const formatDate = (dateString: string) => {\r\n        try {\r\n            return new Date(dateString).toLocaleDateString('en-GB');\r\n        } catch {\r\n            return dateString;\r\n        }\r\n    };\r\n\r\n    const formatTime = (timeString: string) => {\r\n        try {\r\n            const date = new Date(`1970-01-01T${timeString}`);\r\n            return date.toLocaleTimeString('en-US', {\r\n                hour: 'numeric',\r\n                minute: '2-digit',\r\n                hour12: true,\r\n            });\r\n        } catch {\r\n            return timeString;\r\n        }\r\n    };\r\n\r\n    const getPersonName = (id: string, type: string) => {\r\n        const personKey = `${type}_${id}`;\r\n        const details = personDetails[personKey];\r\n        console.log(`Getting name for ${personKey}:`, details);\r\n        return details?.name?.trim() || 'Not Found';\r\n    };\r\n\r\n    const getPersonDetails = (id: string, type: string) => {\r\n        const personKey = `${type}_${id}`;\r\n        return personDetails[personKey] || null;\r\n    };\r\n\r\n    const filteredAssignments = assignments.filter(assignment => {\r\n        const searchLower = searchTerm.toLowerCase();\r\n        const assignmentId = String(assignment.assignmentId || '').toLowerCase();\r\n        const patientId = String(assignment.patientId || '').toLowerCase();\r\n        const doctorId = String(assignment.doctorId || '').toLowerCase();\r\n        const volunteerId = String(assignment.volunteerId || '').toLowerCase();\r\n        const nurseId = String(assignment.nurseId || '').toLowerCase();\r\n        const description = String(assignment.description || '').toLowerCase();\r\n\r\n        const patientName = getPersonName(String(assignment.patientId || ''), 'patient').toLowerCase();\r\n        const doctorName = getPersonName(String(assignment.doctorId || ''), 'doctor').toLowerCase();\r\n        const volunteerName = getPersonName(String(assignment.volunteerId || ''), 'volunteer').toLowerCase();\r\n        const nurseName = getPersonName(String(assignment.nurseId || ''), 'nurse').toLowerCase();\r\n\r\n        return (\r\n            assignmentId.includes(searchLower) ||\r\n            patientId.includes(searchLower) ||\r\n            doctorId.includes(searchLower) ||\r\n            volunteerId.includes(searchLower) ||\r\n            nurseId.includes(searchLower) ||\r\n            description.includes(searchLower) ||\r\n            patientName.includes(searchLower) ||\r\n            doctorName.includes(searchLower) ||\r\n            volunteerName.includes(searchLower) ||\r\n            nurseName.includes(searchLower)\r\n        );\r\n    });\r\n\r\n    const totalPages = Math.ceil(filteredAssignments.length / recordsPerPage);\r\n    const startIndex = (currentPage - 1) * recordsPerPage;\r\n    const currentRecords = filteredAssignments.slice(startIndex, startIndex + recordsPerPage);\r\n\r\n    const showAssignmentDetails = (assignment: PatientAssignmentDataType) => {\r\n        setSelectedAssignment(assignment);\r\n    };\r\n\r\n    if (loading) return (\r\n        <div className=\"loading-container\">\r\n            <div className=\"loading-spinner\"></div>\r\n            <p>Loading assignment records...</p>\r\n        </div>\r\n    );\r\n\r\n    if (error) return (\r\n        <div className=\"error-container\">\r\n            <div className=\"error-message\">\r\n                <h3>Error Loading Data</h3>\r\n                <p>{error}</p>\r\n                <button onClick={() => window.location.reload()}>Retry</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"hospital-dashboard\">\r\n            {/* Header Section */}\r\n            <div className=\"dashboard-header full-width\">\r\n                <div className=\"header-content\">\r\n                    <div className=\"title-section\">\r\n                        <h1>Patient Assignments Registry</h1>\r\n                        <p className=\"subtitle\">Manage and view patient assignment records</p>\r\n                    </div>\r\n                    <button\r\n                        className=\"new-registration-btn\"\r\n                        onClick={() => router.push(\"/viewAssignments/assignpatient\")}\r\n                    >\r\n                        <span className=\"btn-icon\">+</span>\r\n                        New Assignment\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Controls Section */}\r\n            <div className=\"controls-section\">\r\n                <div className=\"search-container flex items-center gap-2\">\r\n                    <span className=\"text-xl\">🔍</span>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search by assignment ID, patient, doctor, volunteer, or nurse...\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => {\r\n                            setSearchTerm(e.target.value);\r\n                            setCurrentPage(1);\r\n                        }}\r\n                        className=\"search-input py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 w-full max-w-md\"\r\n                    />\r\n                </div>\r\n                <div className=\"records-info\">\r\n                    Showing {currentRecords.length} of {filteredAssignments.length} assignments\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* Table Section */}\r\n            <div className=\"table-container\">\r\n                <table className=\"patients-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Assignment ID</th>\r\n                            <th>Date & Time</th>\r\n                            <th>Patient</th>\r\n                            <th>Doctor</th>\r\n                            <th>Volunteer</th>\r\n                            <th>Nurse</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {currentRecords.length === 0 ? (\r\n                            <tr>\r\n                                <td colSpan={7} className=\"no-records\">\r\n                                    {searchTerm ? \"No assignments found matching your search\" : \"No assignment records available\"}\r\n                                </td>\r\n                            </tr>\r\n                        ) : (\r\n                            currentRecords.map((assignment) => (\r\n                                <tr key={assignment.id} className=\"table-row\">\r\n                                    <td className=\"id-cell\">\r\n                                        {assignment.assignmentId}\r\n                                    </td>\r\n                                    <td className=\"date-cell\">\r\n                                        <div>{formatDate(assignment.date)}</div>\r\n                                        <div className=\"text-sm text-gray-600\">{formatTime(assignment.time)}</div>\r\n                                    </td>\r\n                                    <td className=\"name-cell\">\r\n                                        <button\r\n                                            className=\"patient-name-btn\"\r\n                                            onClick={() => showAssignmentDetails(assignment)}\r\n                                            style={{\r\n                                                background: 'none',\r\n                                                border: 'none',\r\n                                                color: '#007bff',\r\n                                                cursor: 'pointer',\r\n                                                textDecoration: 'underline',\r\n                                                padding: 0,\r\n                                                fontSize: 'inherit'\r\n                                            }}\r\n                                        >\r\n                                            {getPersonName(String(assignment.patientId || ''), 'patient')}\r\n                                        </button>\r\n                                        <div className=\"text-sm text-gray-600\">ID: {assignment.patientId}</div>\r\n                                    </td>\r\n                                    <td className=\"name-cell\">\r\n                                        <div>{getPersonName(String(assignment.doctorId || ''), 'doctor')}</div>\r\n                                        <div className=\"text-sm text-gray-600\">ID: {assignment.doctorId}</div>\r\n                                    </td>\r\n                                    <td className=\"name-cell\">\r\n                                        <div>{getPersonName(String(assignment.volunteerId || ''), 'volunteer')}</div>\r\n                                        <div className=\"text-sm text-gray-600\">ID: {assignment.volunteerId}</div>\r\n                                    </td>\r\n                                    <td className=\"name-cell\">\r\n                                        <div>{getPersonName(String(assignment.nurseId || ''), 'nurse')}</div>\r\n                                        <div className=\"text-sm text-gray-600\">ID: {assignment.nurseId}</div>\r\n                                    </td>\r\n                                    <td className=\"actions-cell flex gap-2 items-center\">\r\n                                        {/* Doctor's Note button */}\r\n                                        <Link\r\n                                            href={`/doctorsnote?assignmentId=${assignment.assignmentId}`}\r\n                                            title=\"Add Doctor's Note\"\r\n                                            className=\"text-green-600 hover:text-green-800 p-2 rounded hover:bg-green-100 transition-all\"\r\n                                        >\r\n                                            <NotebookPen className=\"w-5 h-5\" />\r\n                                        </Link>\r\n\r\n                                        {/* Nurse's Note button */}\r\n                                        <Link\r\n                                            href={`/nursesnote?assignmentId=${assignment.assignmentId}`}\r\n                                            title=\"Add Nurse's Note\"\r\n                                            className=\"text-blue-600 hover:text-blue-800 p-2 rounded hover:bg-blue-100 transition-all\"\r\n                                        >\r\n                                            <NotebookPen className=\"w-5 h-5\" />\r\n                                        </Link>\r\n\r\n                                        {/* Volunteer's Note button */}\r\n                                        <Link\r\n                                            href={`/volunteersnote?assignmentId=${assignment.assignmentId}`}\r\n                                            title=\"Add Volunteer's Note\"\r\n                                            className=\"text-red-600 hover:text-red-800 p-2 rounded hover:bg-red-100 transition-all\"\r\n                                        >\r\n                                            <NotebookPen className=\"w-5 h-5\" />\r\n                                        </Link>\r\n\r\n                                        {/* Vertical divider */}\r\n                                        <div className=\"h-6 w-px bg-gray-400 opacity-30 mx-1\"></div>\r\n\r\n                                        {/* Edit button */}\r\n                                        <button\r\n                                            className=\"text-blue-600 hover:text-blue-800 p-2 rounded hover:bg-blue-100 transition-all\"\r\n                                            onClick={() => handleEdit(assignment)}\r\n                                            title=\"Edit assignment record\"\r\n                                        >\r\n                                            <FilePen className=\"w-5 h-5\" />\r\n                                        </button>\r\n\r\n                                        {/* Delete button */}\r\n                                        <button\r\n                                            onClick={() => handleDelete(assignment.id, assignment.assignmentId)}\r\n                                            title=\"Delete assignment record\"\r\n                                            className=\"text-red-600 hover:text-red-800 p-2 rounded hover:bg-red-100 transition-all\"\r\n                                        >\r\n                                            <Trash2 className=\"w-5 h-5\" />\r\n                                        </button>\r\n                                    </td>\r\n\r\n\r\n                                </tr>\r\n                            ))\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            {/* Pagination */}\r\n            {totalPages > 1 && (\r\n                <div className=\"pagination\">\r\n                    <button\r\n                        className=\"pagination-btn\"\r\n                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n                        disabled={currentPage === 1}\r\n                    >\r\n                        Previous\r\n                    </button>\r\n                    <span className=\"pagination-info\">\r\n                        Page {currentPage} of {totalPages}\r\n                    </span>\r\n                    <button\r\n                        className=\"pagination-btn\"\r\n                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\r\n                        disabled={currentPage === totalPages}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            {/* Assignment Details Modal */}\r\n            {selectedAssignment && (\r\n                <div className=\"modal-overlay\" onClick={() => setSelectedAssignment(null)}>\r\n                    <div className=\"patient-details-modal\" onClick={(e) => e.stopPropagation()}>\r\n                        <div className=\"modal-header\">\r\n                            <h2>Assignment Details</h2>\r\n                            <button\r\n                                className=\"modal-close-btn\"\r\n                                onClick={() => setSelectedAssignment(null)}\r\n                            >\r\n                                ×\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"patient-info-grid\">\r\n                                <div className=\"info-section\">\r\n                                    <h3>Assignment Information</h3>\r\n                                    <div className=\"info-row\">\r\n                                        <span className=\"label\">Assignment ID:</span>\r\n                                        <span className=\"value\">{selectedAssignment.assignmentId}</span>\r\n                                    </div>\r\n                                    <div className=\"info-row\">\r\n                                        <span className=\"label\">Date:</span>\r\n                                        <span className=\"value\">{formatDate(selectedAssignment.date)}</span>\r\n                                    </div>\r\n                                    <div className=\"info-row\">\r\n                                        <span className=\"label\">Time:</span>\r\n                                        <span className=\"value\">{formatTime(selectedAssignment.time)}</span>\r\n                                    </div>\r\n                                    <div className=\"info-row\">\r\n                                        <span className=\"label\">Description:</span>\r\n                                        <span className=\"value\">{selectedAssignment.description}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                {/* Patient Details */}\r\n                                <div className=\"info-section\">\r\n                                    <h3>Patient Details</h3>\r\n                                    {(() => {\r\n                                        const patientDetails = getPersonDetails(String(selectedAssignment.patientId), 'patient');\r\n                                        return patientDetails ? (\r\n                                            <>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Name:</span>\r\n                                                    <span className=\"value\">{patientDetails.name}</span>\r\n                                                </div>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Patient ID:</span>\r\n                                                    <span className=\"value\">{selectedAssignment.patientId}</span>\r\n                                                </div>\r\n\r\n                                                {patientDetails.age && (\r\n                                                    <div className=\"info-row\">\r\n                                                        <span className=\"label\">Age:</span>\r\n                                                        <span className=\"value\">{patientDetails.age}</span>\r\n                                                    </div>\r\n                                                )}\r\n                                                {patientDetails.gender && (\r\n                                                    <div className=\"info-row\">\r\n                                                        <span className=\"label\">Gender:</span>\r\n                                                        <span className=\"value\">{patientDetails.gender}</span>\r\n                                                    </div>\r\n                                                )}\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Phone:</span>\r\n                                                    <span className=\"value\">{patientDetails.phone || 'Not provided'}</span>\r\n                                                </div>\r\n                                            </>\r\n                                        ) : (\r\n                                            <div className=\"info-row\">\r\n                                                <span className=\"value\">Patient details not available</span>\r\n                                            </div>\r\n                                        );\r\n                                    })()}\r\n                                </div>\r\n\r\n                                {/* Doctor Details */}\r\n                                <div className=\"info-section\">\r\n                                    <h3>Doctor Details</h3>\r\n                                    {(() => {\r\n                                        const doctorDetails = getPersonDetails(String(selectedAssignment.doctorId), 'doctor');\r\n                                        return doctorDetails ? (\r\n                                            <>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Name:</span>\r\n                                                    <span className=\"value\">{doctorDetails.name}</span>\r\n                                                </div>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Doctor ID:</span>\r\n                                                    <span className=\"value\">{selectedAssignment.doctorId}</span>\r\n                                                </div>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Phone:</span>\r\n                                                    <span className=\"value\">{doctorDetails.phone || 'Not provided'}</span>\r\n                                                </div>\r\n                                            </>\r\n                                        ) : (\r\n                                            <div className=\"info-row\">\r\n                                                <span className=\"value\">Doctor details not available</span>\r\n                                            </div>\r\n                                        );\r\n                                    })()}\r\n                                </div>\r\n\r\n                                {/* Volunteer Details */}\r\n                                <div className=\"info-section\">\r\n                                    <h3>Volunteer Details</h3>\r\n                                    {(() => {\r\n                                        const volunteerDetails = getPersonDetails(String(selectedAssignment.volunteerId), 'volunteer');\r\n                                        return volunteerDetails ? (\r\n                                            <>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Name:</span>\r\n                                                    <span className=\"value\">{volunteerDetails.name}</span>\r\n                                                </div>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Volunteer ID:</span>\r\n                                                    <span className=\"value\">{selectedAssignment.volunteerId}</span>\r\n                                                </div>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Phone:</span>\r\n                                                    <span className=\"value\">{volunteerDetails.phone || 'Not provided'}</span>\r\n                                                </div>\r\n                                            </>\r\n                                        ) : (\r\n                                            <div className=\"info-row\">\r\n                                                <span className=\"value\">Volunteer details not available</span>\r\n                                            </div>\r\n                                        );\r\n                                    })()}\r\n                                </div>\r\n\r\n                                {/* Nurse Details */}\r\n                                <div className=\"info-section\">\r\n                                    <h3>Nurse Details</h3>\r\n                                    {(() => {\r\n                                        const nurseDetails = getPersonDetails(String(selectedAssignment.nurseId), 'nurse');\r\n                                        return nurseDetails ? (\r\n                                            <>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Name:</span>\r\n\r\n                                                    <span className=\"value\">{nurseDetails.name}</span>\r\n                                                </div>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Nurse ID:</span>\r\n                                                    <span className=\"value\">{selectedAssignment.nurseId}</span>\r\n                                                </div>\r\n                                                <div className=\"info-row\">\r\n                                                    <span className=\"label\">Phone:</span>\r\n                                                    <span className=\"value\">{nurseDetails.phone || 'Not provided'}</span>\r\n                                                </div>\r\n                                            </>\r\n                                        ) : (\r\n                                            <div className=\"info-row\">\r\n                                                <span className=\"value\">Nurse details not available</span>\r\n                                            </div>\r\n                                        );\r\n                                    })()}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;AALA;;;;;;AAQA,MAAM,WAAW;AA6BF,SAAS;;IACpB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA+B,EAAE;IAC9E,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAoC;IAC/F,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA8B,CAAC;IAC1E,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAoC,CAAC;IACtF,MAAM,iBAAiB;IAEvB,MAAM,sBAAsB;QACxB,IAAI;YACA,MAAM,CAAC,aAAa,YAAY,eAAe,UAAU,GAAG,MAAM,QAAQ,GAAG,CAAC;gBAC1E,MAAM,GAAG,SAAS,yBAAyB,CAAC;gBAC5C,MAAM,GAAG,SAAS,wBAAwB,CAAC;gBAC3C,MAAM,GAAG,SAAS,8BAA8B,CAAC;gBACjD,MAAM,GAAG,SAAS,sBAAsB,CAAC;aAC5C;YAED,QAAQ,GAAG,CAAC,0BAA0B;gBAClC,UAAU,YAAY,MAAM;gBAC5B,SAAS,WAAW,MAAM;gBAC1B,YAAY,cAAc,MAAM;gBAChC,QAAQ,UAAU,MAAM;YAC5B;YAEA,MAAM,CAAC,UAAU,SAAS,YAAY,OAAO,GAAG,MAAM,QAAQ,GAAG,CAAC;gBAC9D,YAAY,EAAE,GAAG,YAAY,IAAI,KAAK,EAAE;gBACxC,WAAW,EAAE,GAAG,WAAW,IAAI,KAAK,EAAE;gBACtC,cAAc,EAAE,GAAG,cAAc,IAAI,KAAK,EAAE;gBAC5C,UAAU,EAAE,GAAG,UAAU,IAAI,KAAK,EAAE;aACvC;YAED,QAAQ,GAAG,CAAC,iBAAiB;gBAAE;gBAAU;gBAAS;gBAAY;YAAO;YAErE,MAAM,aAA+C,CAAC;YAEtD,0DAA0D;YAC1D,SAAS,OAAO,CAAC,CAAC;gBACd,MAAM,KAAK,QAAQ,EAAE,IAAI,QAAQ,MAAM,IAAI,QAAQ,SAAS;gBAC5D,IAAI,IAAI;oBACJ,UAAU,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG;wBAC1B,IAAI,OAAO;wBACX,MAAM,QAAQ,IAAI,IAAI,QAAQ,QAAQ,IAAI,QAAQ,OAAO,IAAI,CAAC,QAAQ,EAAE,IAAI;wBAC5E,OAAO,QAAQ,KAAK,IAAI,QAAQ,WAAW,IAAI;wBAC/C,OAAO,QAAQ,KAAK,IAAI,QAAQ,YAAY,IAAI;wBAChD,OAAO,QAAQ,KAAK,IAAI,QAAQ,YAAY,IAAI,QAAQ,KAAK,IAAI;wBACjE,KAAK,QAAQ,GAAG,IAAI,QAAQ,UAAU;wBACtC,QAAQ,QAAQ,MAAM,IAAI,QAAQ,GAAG,IAAI;wBACzC,SAAS,QAAQ,OAAO,IAAI,QAAQ,WAAW,IAAI;oBACvD;oBACA,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE;gBAC5E;YACJ;YAEA,yDAAyD;YACzD,QAAQ,OAAO,CAAC,CAAC;gBACb,MAAM,KAAK,OAAO,EAAE,IAAI,OAAO,QAAQ,IAAI,OAAO,MAAM;gBACxD,IAAI,IAAI;oBACJ,MAAM,WAAW,OAAO,IAAI,IAAI,OAAO,QAAQ,IAAI,OAAO,UAAU,IAChE,GAAG,OAAO,SAAS,IAAI,GAAG,CAAC,EAAE,OAAO,QAAQ,IAAI,IAAI,CAAC,IAAI;oBAC7D,UAAU,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG;wBACzB,IAAI,OAAO;wBACX,MAAM,YAAY,CAAC,OAAO,EAAE,IAAI;wBAChC,OAAO,OAAO,KAAK,IAAI,OAAO,WAAW,IAAI;wBAC7C,OAAO,OAAO,KAAK,IAAI,OAAO,YAAY,IAAI;wBAC9C,OAAO,OAAO,KAAK,IAAI,OAAO,YAAY,IAAI,OAAO,KAAK,IAAI;wBAC9D,KAAK,OAAO,GAAG;wBACf,QAAQ,OAAO,MAAM,IAAI,OAAO,GAAG,IAAI;wBACvC,SAAS,OAAO,OAAO,IAAI,OAAO,aAAa,IAAI;oBACvD;oBACA,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE;gBAC1E;YACJ;YAEA,qBAAqB;YACrB,WAAW,OAAO,CAAC,CAAC;gBAChB,MAAM,KAAK,UAAU,EAAE,IAAI,UAAU,MAAM,IAAI,UAAU,WAAW;gBACpE,IAAI,IAAI;oBACJ,UAAU,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG;wBAC5B,IAAI,OAAO;wBACX,MAAM,UAAU,IAAI,IAAI,UAAU,QAAQ,IAAI,UAAU,OAAO,IAAI,UAAU,aAAa,IAAI,CAAC,UAAU,EAAE,IAAI;wBAC/G,OAAO,UAAU,KAAK,IAAI,UAAU,WAAW,IAAI;wBACnD,OAAO,UAAU,KAAK,IAAI,UAAU,YAAY,IAAI;wBACpD,OAAO,UAAU,KAAK,IAAI,UAAU,YAAY,IAAI,UAAU,KAAK,IAAI;wBACvE,KAAK,UAAU,GAAG;wBAClB,QAAQ,UAAU,MAAM,IAAI,UAAU,GAAG,IAAI;wBAC7C,SAAS,UAAU,OAAO,IAAI,UAAU,WAAW,IAAI;oBAC3D;oBACA,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE;gBAChF;YACJ;YAEA,iBAAiB;YACjB,OAAO,OAAO,CAAC,CAAC;gBACZ,MAAM,KAAK,MAAM,EAAE,IAAI,MAAM,OAAO,IAAI,MAAM,QAAQ;gBACtD,IAAI,IAAI;oBACJ,UAAU,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG;wBACxB,IAAI,OAAO;wBACX,MAAM,MAAM,IAAI,IAAI,MAAM,QAAQ,IAAI,MAAM,SAAS,IAAI,CAAC,MAAM,EAAE,IAAI;wBACtE,OAAO,MAAM,KAAK,IAAI,MAAM,WAAW,IAAI;wBAC3C,OAAO,MAAM,KAAK,IAAI,MAAM,YAAY,IAAI;wBAC5C,OAAO,MAAM,KAAK,IAAI,MAAM,YAAY,IAAI,MAAM,KAAK,IAAI;wBAC3D,KAAK,MAAM,GAAG;wBACd,QAAQ,MAAM,MAAM,IAAI,MAAM,GAAG,IAAI;wBACrC,SAAS,MAAM,OAAO,IAAI,MAAM,WAAW,IAAI;oBACnD;oBACA,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE;gBACxE;YACJ;YAEA,QAAQ,GAAG,CAAC,qBAAqB;YACjC,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO,CAAC;QACZ;IACJ;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gDAAE;YACN,eAAe;gBACX,IAAI;oBACA,WAAW;oBAEX,MAAM,MAAM,MAAM,MAAM,GAAG,SAAS,uBAAuB,CAAC;oBAC5D,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM;oBAE7B,MAAM,OAAO,MAAM,IAAI,IAAI;oBAC3B,eAAe;oBAEf,MAAM,aAAa,MAAM;oBACzB,iBAAiB;gBAErB,EAAE,OAAO,KAAU;oBACf,QAAQ,KAAK,CAAC,gCAAgC,IAAI,OAAO;oBACzD,SAAS,IAAI,OAAO;gBACxB,SAAU;oBACN,WAAW;gBACf;YACJ;YACA;QACJ;+CAAG,EAAE;IAGL,MAAM,eAAe,OAAO,IAAY;QACpC,IAAI,CAAC,QAAQ,CAAC,2CAA2C,EAAE,aAAa,+BAA+B,CAAC,GAAG;QAC3G,IAAI;YACA,MAAM,MAAM,MAAM,MAAM,GAAG,SAAS,wBAAwB,EAAE,IAAI,EAAE;gBAChE,QAAQ;YACZ;YACA,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM;YAC7B,eAAe,YAAY,MAAM,CAAC,CAAC,aAAe,WAAW,EAAE,KAAK;YACpE,MAAM;QACV,EAAE,OAAO,KAAK;YACV,MAAM;QACV;IACJ;IAEA,MAAM,aAAa,CAAC;QAChB,IAAI;YACA,IAAI,WAAW,YAAY,EAAE;gBACzB,OAAO,IAAI,CAAC,CAAC,4CAA4C,EAAE,WAAW,YAAY,EAAE;YACxF,OAAO;gBACH,QAAQ,KAAK,CAAC,wCAAwC;YAC1D;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,mCAAmC;QACrD;IACJ;IAGA,MAAM,aAAa,CAAC;QAChB,IAAI;YACA,OAAO,IAAI,KAAK,YAAY,kBAAkB,CAAC;QACnD,EAAE,OAAM;YACJ,OAAO;QACX;IACJ;IAEA,MAAM,aAAa,CAAC;QAChB,IAAI;YACA,MAAM,OAAO,IAAI,KAAK,CAAC,WAAW,EAAE,YAAY;YAChD,OAAO,KAAK,kBAAkB,CAAC,SAAS;gBACpC,MAAM;gBACN,QAAQ;gBACR,QAAQ;YACZ;QACJ,EAAE,OAAM;YACJ,OAAO;QACX;IACJ;IAEA,MAAM,gBAAgB,CAAC,IAAY;QAC/B,MAAM,YAAY,GAAG,KAAK,CAAC,EAAE,IAAI;QACjC,MAAM,UAAU,aAAa,CAAC,UAAU;QACxC,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC,EAAE;QAC9C,OAAO,SAAS,MAAM,UAAU;IACpC;IAEA,MAAM,mBAAmB,CAAC,IAAY;QAClC,MAAM,YAAY,GAAG,KAAK,CAAC,EAAE,IAAI;QACjC,OAAO,aAAa,CAAC,UAAU,IAAI;IACvC;IAEA,MAAM,sBAAsB,YAAY,MAAM,CAAC,CAAA;QAC3C,MAAM,cAAc,WAAW,WAAW;QAC1C,MAAM,eAAe,OAAO,WAAW,YAAY,IAAI,IAAI,WAAW;QACtE,MAAM,YAAY,OAAO,WAAW,SAAS,IAAI,IAAI,WAAW;QAChE,MAAM,WAAW,OAAO,WAAW,QAAQ,IAAI,IAAI,WAAW;QAC9D,MAAM,cAAc,OAAO,WAAW,WAAW,IAAI,IAAI,WAAW;QACpE,MAAM,UAAU,OAAO,WAAW,OAAO,IAAI,IAAI,WAAW;QAC5D,MAAM,cAAc,OAAO,WAAW,WAAW,IAAI,IAAI,WAAW;QAEpE,MAAM,cAAc,cAAc,OAAO,WAAW,SAAS,IAAI,KAAK,WAAW,WAAW;QAC5F,MAAM,aAAa,cAAc,OAAO,WAAW,QAAQ,IAAI,KAAK,UAAU,WAAW;QACzF,MAAM,gBAAgB,cAAc,OAAO,WAAW,WAAW,IAAI,KAAK,aAAa,WAAW;QAClG,MAAM,YAAY,cAAc,OAAO,WAAW,OAAO,IAAI,KAAK,SAAS,WAAW;QAEtF,OACI,aAAa,QAAQ,CAAC,gBACtB,UAAU,QAAQ,CAAC,gBACnB,SAAS,QAAQ,CAAC,gBAClB,YAAY,QAAQ,CAAC,gBACrB,QAAQ,QAAQ,CAAC,gBACjB,YAAY,QAAQ,CAAC,gBACrB,YAAY,QAAQ,CAAC,gBACrB,WAAW,QAAQ,CAAC,gBACpB,cAAc,QAAQ,CAAC,gBACvB,UAAU,QAAQ,CAAC;IAE3B;IAEA,MAAM,aAAa,KAAK,IAAI,CAAC,oBAAoB,MAAM,GAAG;IAC1D,MAAM,aAAa,CAAC,cAAc,CAAC,IAAI;IACvC,MAAM,iBAAiB,oBAAoB,KAAK,CAAC,YAAY,aAAa;IAE1E,MAAM,wBAAwB,CAAC;QAC3B,sBAAsB;IAC1B;IAEA,IAAI,SAAS,qBACT,6LAAC;QAAI,WAAU;;0BACX,6LAAC;gBAAI,WAAU;;;;;;0BACf,6LAAC;0BAAE;;;;;;;;;;;;IAIX,IAAI,OAAO,qBACP,6LAAC;QAAI,WAAU;kBACX,cAAA,6LAAC;YAAI,WAAU;;8BACX,6LAAC;8BAAG;;;;;;8BACJ,6LAAC;8BAAG;;;;;;8BACJ,6LAAC;oBAAO,SAAS,IAAM,OAAO,QAAQ,CAAC,MAAM;8BAAI;;;;;;;;;;;;;;;;;IAK7D,qBACI,6LAAC;QAAI,WAAU;;0BAEX,6LAAC;gBAAI,WAAU;0BACX,cAAA,6LAAC;oBAAI,WAAU;;sCACX,6LAAC;4BAAI,WAAU;;8CACX,6LAAC;8CAAG;;;;;;8CACJ,6LAAC;oCAAE,WAAU;8CAAW;;;;;;;;;;;;sCAE5B,6LAAC;4BACG,WAAU;4BACV,SAAS,IAAM,OAAO,IAAI,CAAC;;8CAE3B,6LAAC;oCAAK,WAAU;8CAAW;;;;;;gCAAQ;;;;;;;;;;;;;;;;;;0BAO/C,6LAAC;gBAAI,WAAU;;kCACX,6LAAC;wBAAI,WAAU;;0CACX,6LAAC;gCAAK,WAAU;0CAAU;;;;;;0CAC1B,6LAAC;gCACG,MAAK;gCACL,aAAY;gCACZ,OAAO;gCACP,UAAU,CAAC;oCACP,cAAc,EAAE,MAAM,CAAC,KAAK;oCAC5B,eAAe;gCACnB;gCACA,WAAU;;;;;;;;;;;;kCAGlB,6LAAC;wBAAI,WAAU;;4BAAe;4BACjB,eAAe,MAAM;4BAAC;4BAAK,oBAAoB,MAAM;4BAAC;;;;;;;;;;;;;0BAMvE,6LAAC;gBAAI,WAAU;0BACX,cAAA,6LAAC;oBAAM,WAAU;;sCACb,6LAAC;sCACG,cAAA,6LAAC;;kDACG,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;kDACJ,6LAAC;kDAAG;;;;;;;;;;;;;;;;;sCAGZ,6LAAC;sCACI,eAAe,MAAM,KAAK,kBACvB,6LAAC;0CACG,cAAA,6LAAC;oCAAG,SAAS;oCAAG,WAAU;8CACrB,aAAa,8CAA8C;;;;;;;;;;uCAIpE,eAAe,GAAG,CAAC,CAAC,2BAChB,6LAAC;oCAAuB,WAAU;;sDAC9B,6LAAC;4CAAG,WAAU;sDACT,WAAW,YAAY;;;;;;sDAE5B,6LAAC;4CAAG,WAAU;;8DACV,6LAAC;8DAAK,WAAW,WAAW,IAAI;;;;;;8DAChC,6LAAC;oDAAI,WAAU;8DAAyB,WAAW,WAAW,IAAI;;;;;;;;;;;;sDAEtE,6LAAC;4CAAG,WAAU;;8DACV,6LAAC;oDACG,WAAU;oDACV,SAAS,IAAM,sBAAsB;oDACrC,OAAO;wDACH,YAAY;wDACZ,QAAQ;wDACR,OAAO;wDACP,QAAQ;wDACR,gBAAgB;wDAChB,SAAS;wDACT,UAAU;oDACd;8DAEC,cAAc,OAAO,WAAW,SAAS,IAAI,KAAK;;;;;;8DAEvD,6LAAC;oDAAI,WAAU;;wDAAwB;wDAAK,WAAW,SAAS;;;;;;;;;;;;;sDAEpE,6LAAC;4CAAG,WAAU;;8DACV,6LAAC;8DAAK,cAAc,OAAO,WAAW,QAAQ,IAAI,KAAK;;;;;;8DACvD,6LAAC;oDAAI,WAAU;;wDAAwB;wDAAK,WAAW,QAAQ;;;;;;;;;;;;;sDAEnE,6LAAC;4CAAG,WAAU;;8DACV,6LAAC;8DAAK,cAAc,OAAO,WAAW,WAAW,IAAI,KAAK;;;;;;8DAC1D,6LAAC;oDAAI,WAAU;;wDAAwB;wDAAK,WAAW,WAAW;;;;;;;;;;;;;sDAEtE,6LAAC;4CAAG,WAAU;;8DACV,6LAAC;8DAAK,cAAc,OAAO,WAAW,OAAO,IAAI,KAAK;;;;;;8DACtD,6LAAC;oDAAI,WAAU;;wDAAwB;wDAAK,WAAW,OAAO;;;;;;;;;;;;;sDAElE,6LAAC;4CAAG,WAAU;;8DAEV,6LAAC,+JAAA,CAAA,UAAI;oDACD,MAAM,CAAC,0BAA0B,EAAE,WAAW,YAAY,EAAE;oDAC5D,OAAM;oDACN,WAAU;8DAEV,cAAA,6LAAC,uNAAA,CAAA,cAAW;wDAAC,WAAU;;;;;;;;;;;8DAI3B,6LAAC,+JAAA,CAAA,UAAI;oDACD,MAAM,CAAC,yBAAyB,EAAE,WAAW,YAAY,EAAE;oDAC3D,OAAM;oDACN,WAAU;8DAEV,cAAA,6LAAC,uNAAA,CAAA,cAAW;wDAAC,WAAU;;;;;;;;;;;8DAI3B,6LAAC,+JAAA,CAAA,UAAI;oDACD,MAAM,CAAC,6BAA6B,EAAE,WAAW,YAAY,EAAE;oDAC/D,OAAM;oDACN,WAAU;8DAEV,cAAA,6LAAC,uNAAA,CAAA,cAAW;wDAAC,WAAU;;;;;;;;;;;8DAI3B,6LAAC;oDAAI,WAAU;;;;;;8DAGf,6LAAC;oDACG,WAAU;oDACV,SAAS,IAAM,WAAW;oDAC1B,OAAM;8DAEN,cAAA,6LAAC,+MAAA,CAAA,UAAO;wDAAC,WAAU;;;;;;;;;;;8DAIvB,6LAAC;oDACG,SAAS,IAAM,aAAa,WAAW,EAAE,EAAE,WAAW,YAAY;oDAClE,OAAM;oDACN,WAAU;8DAEV,cAAA,6LAAC,6MAAA,CAAA,SAAM;wDAAC,WAAU;;;;;;;;;;;;;;;;;;mCApFrB,WAAW,EAAE;;;;;;;;;;;;;;;;;;;;;YAiGzC,aAAa,mBACV,6LAAC;gBAAI,WAAU;;kCACX,6LAAC;wBACG,WAAU;wBACV,SAAS,IAAM,eAAe,CAAA,OAAQ,KAAK,GAAG,CAAC,OAAO,GAAG;wBACzD,UAAU,gBAAgB;kCAC7B;;;;;;kCAGD,6LAAC;wBAAK,WAAU;;4BAAkB;4BACxB;4BAAY;4BAAK;;;;;;;kCAE3B,6LAAC;wBACG,WAAU;wBACV,SAAS,IAAM,eAAe,CAAA,OAAQ,KAAK,GAAG,CAAC,OAAO,GAAG;wBACzD,UAAU,gBAAgB;kCAC7B;;;;;;;;;;;;YAOR,oCACG,6LAAC;gBAAI,WAAU;gBAAgB,SAAS,IAAM,sBAAsB;0BAChE,cAAA,6LAAC;oBAAI,WAAU;oBAAwB,SAAS,CAAC,IAAM,EAAE,eAAe;;sCACpE,6LAAC;4BAAI,WAAU;;8CACX,6LAAC;8CAAG;;;;;;8CACJ,6LAAC;oCACG,WAAU;oCACV,SAAS,IAAM,sBAAsB;8CACxC;;;;;;;;;;;;sCAKL,6LAAC;4BAAI,WAAU;;8CACX,6LAAC;oCAAI,WAAU;8CACX,cAAA,6LAAC;wCAAI,WAAU;;0DACX,6LAAC;0DAAG;;;;;;0DACJ,6LAAC;gDAAI,WAAU;;kEACX,6LAAC;wDAAK,WAAU;kEAAQ;;;;;;kEACxB,6LAAC;wDAAK,WAAU;kEAAS,mBAAmB,YAAY;;;;;;;;;;;;0DAE5D,6LAAC;gDAAI,WAAU;;kEACX,6LAAC;wDAAK,WAAU;kEAAQ;;;;;;kEACxB,6LAAC;wDAAK,WAAU;kEAAS,WAAW,mBAAmB,IAAI;;;;;;;;;;;;0DAE/D,6LAAC;gDAAI,WAAU;;kEACX,6LAAC;wDAAK,WAAU;kEAAQ;;;;;;kEACxB,6LAAC;wDAAK,WAAU;kEAAS,WAAW,mBAAmB,IAAI;;;;;;;;;;;;0DAE/D,6LAAC;gDAAI,WAAU;;kEACX,6LAAC;wDAAK,WAAU;kEAAQ;;;;;;kEACxB,6LAAC;wDAAK,WAAU;kEAAS,mBAAmB,WAAW;;;;;;;;;;;;;;;;;;;;;;;8CAInE,6LAAC;;sDAEG,6LAAC;4CAAI,WAAU;;8DACX,6LAAC;8DAAG;;;;;;gDACH,CAAC;oDACE,MAAM,iBAAiB,iBAAiB,OAAO,mBAAmB,SAAS,GAAG;oDAC9E,OAAO,+BACH;;0EACI,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,eAAe,IAAI;;;;;;;;;;;;0EAEhD,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,mBAAmB,SAAS;;;;;;;;;;;;4DAGxD,eAAe,GAAG,kBACf,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,eAAe,GAAG;;;;;;;;;;;;4DAGlD,eAAe,MAAM,kBAClB,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,eAAe,MAAM;;;;;;;;;;;;0EAGtD,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,eAAe,KAAK,IAAI;;;;;;;;;;;;;qFAIzD,6LAAC;wDAAI,WAAU;kEACX,cAAA,6LAAC;4DAAK,WAAU;sEAAQ;;;;;;;;;;;gDAGpC,CAAC;;;;;;;sDAIL,6LAAC;4CAAI,WAAU;;8DACX,6LAAC;8DAAG;;;;;;gDACH,CAAC;oDACE,MAAM,gBAAgB,iBAAiB,OAAO,mBAAmB,QAAQ,GAAG;oDAC5E,OAAO,8BACH;;0EACI,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,cAAc,IAAI;;;;;;;;;;;;0EAE/C,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,mBAAmB,QAAQ;;;;;;;;;;;;0EAExD,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,cAAc,KAAK,IAAI;;;;;;;;;;;;;qFAIxD,6LAAC;wDAAI,WAAU;kEACX,cAAA,6LAAC;4DAAK,WAAU;sEAAQ;;;;;;;;;;;gDAGpC,CAAC;;;;;;;sDAIL,6LAAC;4CAAI,WAAU;;8DACX,6LAAC;8DAAG;;;;;;gDACH,CAAC;oDACE,MAAM,mBAAmB,iBAAiB,OAAO,mBAAmB,WAAW,GAAG;oDAClF,OAAO,iCACH;;0EACI,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,iBAAiB,IAAI;;;;;;;;;;;;0EAElD,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,mBAAmB,WAAW;;;;;;;;;;;;0EAE3D,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,iBAAiB,KAAK,IAAI;;;;;;;;;;;;;qFAI3D,6LAAC;wDAAI,WAAU;kEACX,cAAA,6LAAC;4DAAK,WAAU;sEAAQ;;;;;;;;;;;gDAGpC,CAAC;;;;;;;sDAIL,6LAAC;4CAAI,WAAU;;8DACX,6LAAC;8DAAG;;;;;;gDACH,CAAC;oDACE,MAAM,eAAe,iBAAiB,OAAO,mBAAmB,OAAO,GAAG;oDAC1E,OAAO,6BACH;;0EACI,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFAExB,6LAAC;wEAAK,WAAU;kFAAS,aAAa,IAAI;;;;;;;;;;;;0EAE9C,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,mBAAmB,OAAO;;;;;;;;;;;;0EAEvD,6LAAC;gEAAI,WAAU;;kFACX,6LAAC;wEAAK,WAAU;kFAAQ;;;;;;kFACxB,6LAAC;wEAAK,WAAU;kFAAS,aAAa,KAAK,IAAI;;;;;;;;;;;;;qFAIvD,6LAAC;wDAAI,WAAU;kEACX,cAAA,6LAAC;4DAAK,WAAU;sEAAQ;;;;;;;;;;;gDAGpC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASrC;GAlmBwB;;QACL,qIAAA,CAAA,YAAS;;;KADJ","debugId":null}}]
}